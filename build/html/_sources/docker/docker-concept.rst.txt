.. _docker-concept:

===========================
Docker基本概念
===========================

镜像、层、容器
------------------

.. image:: ../_static/docker/docker_image_layer_container.png
   :scale: 50

* Docker Image

Docker镜像是最底层的包含文件系统和元数据的打包文件

* Docker Layer

Docker层是在镜像之上，根据不同需求不断叠加的文件修改内容。使用相同的镜像底层和相同的层创建的Docker容器是完全一致的。

* Docker Container

Docker容器就是从镜像上运行的实例，相同镜像可以运行多个容器，区别只是容器的名字不同。

.. note::

   用操作系统概念做一个对比：你可以将镜像看成存储在磁盘上的应用程序（文件），而容器就是把程序文件加载到内存中运行的进程。

   用面向对象编程做一个对比：镜像就相当于类，而容器相当于对象。对象是类的实例化，类似的，容器就是镜像的实例化。可以从单个镜像创建多个容器，每个容器都是彼此隔离的，就好像从类创建的对象也是彼此分离的。无论你如何修改对象，都不会影响到类的定义。

.. image:: ../_static/docker/docker_image_container.png
   :scale: 50

Docker镜像文件实际存储在磁盘中，镜像包含了文件（系统文件）和元数据，是应用程序运行环境。

.. note::

   元数据是环境变量、端口映射、卷等信息

当容器从镜像上运行起来，所修改的文件在容器中采用了 copy-on-write 机制存储，这样就不会影响到基础的镜像。容器是从镜像创建的，继承了镜像的文件系统，并使用元数据来决定启动配置。
