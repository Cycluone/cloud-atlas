=======================================
4.3 通过VNC访问虚拟机桌面
=======================================

--------------------------------
通过ssh tunnel访问VNC(推荐)
--------------------------------

在前面 :ref:`virt-install-import` 创建了Window 2016虚拟机，其VNC端口监听在服务器的回环地址，不能直接被远程访问。

``ssh tunnel`` 提供了一种通过SSH端口转发的方式来实现远程访问服务器后面IP端口的方法。这种方法特别适合防火墙保护后的主机访问，或者服务访问。只要具有ssh远程访问堡垒服务器的权限，就可以通过这个方法访问后面受保护的服务：

::

    ssh -L 5900:localhost:5900 -N -f -l huatai 192.168.0.2

.. note::

    * ``-N`` 参数表示不执行远程命令，这个参数是用于端口转发的
    * ``-f`` 参数表示后台执行ssh
    * ``-l`` 参数表示登陆的账号名，这里就是 **我** 啦
    * ``192.168.0.2`` 是物理服务器HOST的IP地址

    上述命令建立了 本地主机（也就是我使用的笔记本）端口 ``5900`` 映射到远程服务器 ``192.168.0.2`` 上的回环地址端口 ``5900`` （ ``localhost:5900`` ）的映射。

如果要批量开启一批端口转发可使用如下脚本(例如101个端口转发，可以支持服务器上101个虚拟机的VNC访问)：

::

    SERVER=192.168.0.2
    PORTS=`echo {5900..6000}`
    for i in $PORTS;do
        ssh -L $i:127.0.0.1:$i -N -f $SERVER
    done

上述方法甚至可以通过接力方式通过多跳访问最终服务器的VNC，假设在 ``192.168.0.2`` 服务器上运行的 ``wind2016`` 虚拟机监听在其主机的回环地址，而这个 ``192.168.0.2`` 和客户端 ``10.1.1.233`` 不是一个网段且没有路由，但是中间间隔的跳板机同时具备了两块网卡 ``10.1.1.1`` 和 ``192.168.0.1`` ，则客户端可以通过以下方式访问：

::

    10.1.1.233 -> 5900:localhost:5900 10.1.1.1 -> 5900:localhost:5900 192.168.0.2

即，首先在客户机 ``10.1.1.233`` 上执行

::

    ssh -L 5900:localhost:5900 -N -f 10.1.1.1

然后登陆到中间跳板机 ``10.1.1.1`` 上执行

::

    ssh -L 5900:localhost:5900 -N -f 192.168.0.2

此时在客户机 ``10.1.1.233`` 上访问自己的本地回环地址的 ``5900`` 端口就可以直接访问到隔离后的服务器 ``192.168.0.2`` 隐藏在回环地址上的VNC端口。

-------------
vnc客户端
-------------

在完成了上述SSL Tunnel设置后，现在我们就可以通过VNC客户端来访问虚拟机。

经过反复测试，我发现在Mac OS X平台上，很多vnc viewer客户端都不能正常连接到qemu提供的VNC界面，折腾了很长时间。

最后发现，开源的 `Chicken <http://sourceforge.net/projects/chicken/>`_ 是最好的VNC客户端，可以支持访问VNC界面。

.. note::

    微软的Windows服务器提供性能更好的RDP协议访问的远程桌面。如果目前你按照本书步骤执行，则当前启动的Windows虚拟机采用的是NAT模式，虚拟机网络连接到的是host主机的NAT网桥，这个网段是在 ``192.168.122.x``。通过在HOST主机，也就是 ``192.168.0.2`` 上执行以下命令检查DHCP分配给Windows 2016虚拟机的IP地址

    ::

        arp -n | grep 192.168.122

    例如输出：

    ::

        192.168.122.217          ether   52:54:00:fc:b9:e6   C                     virbr0

    其中非 ``192.168.122.1`` 的其他IP地址就是分配给虚拟机的IP地址，如果仔细查看可以根据虚拟机启动先后顺序找出规律。这里的案例就是分配给Windows 2016虚拟机IP地址。

    另外，在下一个章节，我会介绍如何在 libvirt 的NAT网络中为每个虚拟机配置固定IP地址，方便做端口映射。

    我们也可以采用类似方法实现访问Windows 2016虚拟机的Remote Desktop:

    ::

        # 在客户机 10.1.1.233 上执行
        ssh -L 3389:127.0.0.1:3389 -N -f 10.1.1.1
        # 在跳板机 10.1.1.1 上执行
        ssh -L 3389:192.168.122.217:3389 -N -f 192.168.0.2

    接下来就可以在客户机 ``10.1.1.233`` 上访问本地 3389 端口来访问远程Windows桌面

    综合VNC和RDP的端口转发，我们也可以写一个简单的脚本来实现：

    ::

        gw_ip=10.1.1.1          # 跳板机
        nc_ip=192.168.0.2       # HOST主机
        vm_ip=192.168.122.217   # Windows虚拟机

        ssh -L 5900:localhost:5900 -N -f $gw_ip
        ssh -L 3389:localhost:3389 -N -f $gw_ip

        ssh $gw_ip "ssh -L 5900:localhost:5900 -N -f $nc_ip"
        ssh $gw_ip "ssh -L 3389:$vm_ip:3389 -N -f $nc_ip"

---------------------------------------------------
开启VNC监听（存在安全隐患，不推荐）
---------------------------------------------------

.. note::

    现代Linux操作系统发行版往往会启用内建的防火墙功能，默认屏蔽除 ``22`` 端口以外所有端口，所以本段落开启VNC监听的方法可能会受到防火墙限制。

* 方法一

在启动虚拟机时候使用参数 ``-vnc 0.0.0.0:1``

* 方法二

编辑 ``/etc/libvirt/qemu/win2012.xml``

::
    
    <graphics type='vnc' port='-1' autoport='yes' keymap='en-us'/>

重启 libvirtd

::

    /etc/init.d/libvirtd restart
    virsh shutdown win2012
    virsh start win2012

.. note::

    上述方法会使得所有创建虚拟机的VNC端口对外暴露，虽然方便，但是也存在安全隐患，仅限于Lab环境使用

* 方法三

::

    sudo virsh edit win201


动态修改 `win2016.xml` 修改添加 `listen='0.0.0.0'`后再次重启虚拟机

::

    <graphics type='vnc' port='-1' autoport='yes' listen='0.0.0.0'/>


-----------
参考
-----------

* `HowTo: Tunneling VNC Connections Over SSH <http://www.cyberciti.biz/tips/tunneling-vnc-connections-over-ssh-howto.html>`_
* `KVM Virtualization: Start VNC Remote Access For Guest Operating Systems <http://www.cyberciti.biz/faq/linux-kvm-vnc-for-guest-machine/>`_