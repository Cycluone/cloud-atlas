.. _prepare_kernel_dev:

=======================
内核开发学习准备工作
=======================

内核版本
===========

`Linux Kernel Development <https://www.amazon.com/Linux-Kernel-Development-Developers-Library-ebook-dp-B003V4ATI0/dp/B003V4ATI0/>`_ (2.6.34)和 `Professional Linux Kernel Architecture <https://www.amazon.com/Professional-Kernel-Architecture-Wolfgang-Mauerer/dp/0470343435/>`_ (2.6.24) 解析Linux版本采用的是稳定内核系列 2.6.x ，大约相当于 RHEL/CentOS 6.x 时代主流Linux发行版采用的内核版本。这个系列内核具备了现代Linux系统的特性，同时代码量尚未急剧膨胀。

我采用 CentOS 6.10 系统，然后安装 `kernel v2.6 <https://kernel.org/pub/linux/kernel/v2.6/>`_ 内核

开发环境准备
===============

- 在 :ref:`vmware_fusion` 安装 CentOS 6.10，采用最小化安装

- 注意，由于CentOS已经停止CentOS 6的更新，所以原先软件仓库配置已经不能使用。需要 :ref:`fix_centos6_repo`

- 操作系统安装完成后，采用 :ref:`init_centos` 中相似方法安装必要开发工具::

   yum install vim sysstat nfs-utils gcc gcc-c++ make \
     flex autoconf automake ncurses-devel zlib-devel git

安装索引工具
===============

在内核源代码浏览，需要使用索引工具，推荐使用 ``cscope`` 和 ``ctags`` ，以下命令进行安装::

   sudo yum install cscope ctags-etags

如果是debian系统，则安装 ``cscope exuberant-ctags``

.. note::

   - ``cscope`` 是用于在代码函数间转跳，可以跳到符号定义，搜索所有符号使用等
   - ``ctags`` 是 ``Tagbar`` 插件所需要的，也是 ``Omni completion`` (vim内置的自动补全机制) 所使用等，也可以用于代码函数转跳。 不过 ``ctags`` 不如 ``cscope`` 的转跳功能，因为 ``ctags`` 只能挑到符号定义位置。

在内核源代码目录下，有2种方式可以创建索引：

- 手工创建索引
- 使用内核提供的脚本创建索引

如果你不知道哪种方式更适合，推荐使用内核脚本

使用 scripts/tags.sh 脚本创建索引
----------------------------------

内核源代码提供了一个很好的脚本 ``scripts/tags.sh`` 来创建内核索引数据库，也就是使用 ``make cscope`` 和 ``make tags`` 规则来创建索引，类似如下::

   make O=. ARCH=arm SUBARCH=omap2 COMPILED_SOURCE=1 cscope tags

这里:

- ``O=.`` 使用绝对路径(如果你需要在内核源代码目录之外加载创建的 ``cscope/ctags`` 索引文件，例如开发 ``out-of-tree`` 内核模块)。如果你想使用相对路径(例如只在内核源代码目录下开发)就可以忽略这个参数
- ``ARCH=...`` 选择索引的CPU架构。例如使用 ``ARCH=arm`` 则 ``arch/arm/`` 目录将会索引，其他 ``arch/*`` 目录将被忽略
- ``SUBARCH=...`` 选择子架构(和主办相关文件)索引。例如 ``SUBARCH=omap2`` 则只有 ``arch/arm/mach-omap2/`` 和 ``arch/arm/plat-omap/`` 目录被索引，其他主机和平台被忽略。
- ``COMPILED_SOURCE=1`` 只索引编译过文件。通常只是对源代码中你编译部分索引，如果还需要所有其他不被编译的文件，就不使用这个参数
- ``cscope`` 创建cscope索引的规则
- ``tags`` 创建ctags索引的规则

例如，开发x86的代码::

   make ARCH=x86 cscope tags

手工创建索引
---------------

内核脚本 ``tags.sh`` 有可能不能正常工作，或者你需要采用更多控制索引的功能，此时你可以手工索引内核源代码(详情可参考 `Using Cscope on large projects (example: the Linux kernel) <http://cscope.sourceforge.net/large_projects.html>`_ ):

- 首先创建一个 ``cscope.files`` 文件列出所有需要索引的文件

参考
======

- `Kernel Developer Workflow <https://cs4118.github.io/dev-guides/kernel-workflow.html>`_
- `Vim configuration for Linux kernel development <https://stackoverflow.com/questions/33676829/vim-configuration-for-linux-kernel-development>`_