<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" /><meta name="generator" content="Docutils 0.17.1: http://docutils.sourceforge.net/" />

    <title>Node.js 简介</title>
    <link rel="stylesheet" href="../_static/pygments.css" type="text/css" />
    <link rel="stylesheet" href="../_static/epub.css" type="text/css" />
    <link rel="stylesheet" href="../_static/theme_overrides.css" type="text/css" /> 
  </head><body>

    <div class="document">
      <div class="documentwrapper">
          <div class="body" role="main">
            
  <section id="node-js">
<span id="intrudoce-nodejs"></span><h1>Node.js 简介</h1>
<p>Node.js是JavaScript的运行平台，其显著特征是：</p>
<ul class="simple">
<li><p>异步机制</p></li>
<li><p>事件驱动机制</p></li>
<li><p>小巧精悍的标准库</p></li>
</ul>
<p>Node当前有两个活跃版本：</p>
<ul class="simple">
<li><p>长期支持版(LTS)</p></li>
<li><p>当前版(current)</p></li>
</ul>
<p>虽然Node.js从2009年诞生，仅仅走过11年发展历史，但是已经被广泛应用在WEB开发每个角落。</p>
<p>虽然，和JavaScript一样，Node.js诞生也存在不足，但是随着Node.js广泛使用和迭代发展，已经成为WEB开发的事实运行标准。</p>
<p>Node所使用的Google V8引擎是基于ECMAScript 2015开发的: ECMAScript 2015是ECMAScript标准的第6个版本，也称为ES6，一般简写为ES2015。</p>
<ul class="simple">
<li><p>随着ES2015发展和定稿，涌现了大批利用ES2015特性开发的新模块，例如 <a class="reference external" href="http://expressjs.com/">express框架</a><span class="link-target"> [http://expressjs.com/]</span> 核心团队开发的 <a class="reference internal" href="koa/index.xhtml#koa"><span class="std std-ref">Node.js开源框架koa</span></a></p>
<ul>
<li><p>阿里巴巴基于koa开发的开源企业级框架 <a class="reference internal" href="egg/index.xhtml#egg"><span class="std std-ref">Node.js企业级开源框架egg</span></a></p></li>
</ul>
</li>
</ul>
<section id="koa-js-egg-js-express-js-typescript">
<h2>koa.js, egg.js, express.js, TypeScript</h2>
<p>Express.js是Node.js开发的传统Web框架，提供了 web 开发所需的路由、模版引擎、MVC、Cookie、Session等功能，支持通过中间件扩展，上手简单，功能强大，是目前最流行的Node.js Web框架。</p>
<ul class="simple">
<li><p>Express是ECMAScript 5 向 ECMAScript 6(2015)过渡时期的产物，处理异步比较繁琐</p></li>
<li><p>Express原作者基于 ECMAScript 8 (2017) 标准推出了 Koa 2，用 async + await 语法让中间件代码更加简洁、清爽，形成了经典的洋葱模型。</p></li>
</ul>
<p>Koa目标和Express一致，但几个显著变化：</p>
<ul class="simple">
<li><p>中间层使用洋葱模型，让中间件代码根据next方法分隔有两次执行时机</p></li>
<li><p>几乎不再内置任何中间件，把控制权和复杂度交给开发者</p>
<ul>
<li><p>由于web应用离不开sesson，试图模版，路由和文件上传，日志管理，这些在Koa都不提供，需要从官方的Middleware寻找，这带来了非常繁杂的搭配</p></li>
</ul>
</li>
<li><p>Koa 1通过generator、Koa 2通过async/await愈发，让web中高频出现的异步调用编写简洁</p></li>
</ul>
<p>egg.js也是生成web的框架:</p>
<ul class="simple">
<li><p>提供了一套约定有线配置的实现，以便架构师可以通过配置轻松定制符合团队约定的web框架</p></li>
<li><p>egg.js底层基于Koa2，中间件机制和koa一致，只不过为了实现通过config文件配置，需要简单包装</p>
<ul>
<li><p>egg.js实际上就是基于Koa.js，将社区最佳实践整合进了Koa.js，并且将多进程启动，开发时的热更新等问题一并解决了</p></li>
<li><p>对开发者友好，开箱即用(就是最佳配置)</p></li>
<li><p>egg.js不支持现在最热的TypeScript，所以淘宝在egg.js基础上，引入了TypeScript支持，取名为 <code class="docutils literal notranslate"><span class="pre">MidwayJS</span></code></p></li>
</ul>
</li>
</ul>
<p>Nest.js 是基于Express.js的全功能框架，在Express.js上封装，充分利用了TypeScript的特性。当前社区活跃，进展迅速。不过需要有TypeScript基础才能较好学习。</p>
<div class="admonition note">
<p class="admonition-title">注解</p>
<p>当前应该学习最新的ECMAScript标准实现，并学习TypeScript，同时可以学习Koa 2框架来实现自己的项目目标。</p>
</div>
</section>
<section id="node-web">
<h2>Node Web应用解析</h2>
<p>Node和JavaScript的优势之一是它们的单线程编程模型：指令序列一次执行一条，代码不是并行执行的，这种机制规避了线程编程中经常出现的问题，如资源死锁和竞态条件。</p>
<ul class="simple">
<li><p>事件：当浏览器触发一个事件时(例如点击按钮)就会有一个之前定义的函数运行</p></li>
<li><p>非阻塞I/O：程序在请求慢速资源(如磁盘或网络)时不会等待可以继续执行其他任务，当资源就绪(完成操作)则会运行一个回调函数来处理操作结果</p></li>
<li><p>异步API(事件轮询, event loop)</p></li>
</ul>
</section>
<section id="nodev8">
<h2>Node和V8</h2>
<p>Node的动力源自V8 JavaScript引擎，最初由Google Chrome的Chromium项目组开发。V8的特性是会被JavaScript直接编译为机器吗，此外还有一些代码优化特性，所以Node的性能卓越。</p>
<p>Node使用本地组件 <code class="docutils literal notranslate"><span class="pre">libuv</span></code> 来处理I/O，V8负责JavaScript代码的解释和执行。使用C++绑定层将libuv和V8结合起来。</p>
<figure class="align-default">
<img alt="../_images/nodejs_stack.png" src="../_images/nodejs_stack.png" style="width: 448.0px; height: 264.59999999999997px;" />
</figure>
<p>Node根据V8的ES2015特性分为以下三个特性组:</p>
<ul class="simple">
<li><p>shipping: 默认开启，稳定特性</p></li>
<li><p>staged: Node运行命令行参数 <code class="docutils literal notranslate"><span class="pre">--harmony</span></code> 启用，V8团队将所有接近完成的特性放在这组中</p></li>
<li><p>in progress: 稳定性较差，需要具体的特性参数来开启，通过 <code class="docutils literal notranslate"><span class="pre">node</span> <span class="pre">--v8-options</span> <span class="pre">|</span> <span class="pre">grep</span> <span class="pre">&quot;in</span> <span class="pre">gress&quot;</span></code> 可以获得可用的in progress特性</p></li>
</ul>
</section>
<section id="node">
<h2>Node版本</h2>
<ul class="simple">
<li><p>长期支持版(LTS): 18个月支持服务，之后有12个月维护性支持服务</p></li>
<li><p>当前版(current)</p></li>
<li><p>每日构建版(nightly)</p></li>
</ul>
<p>当Node主版本号变化，则意味着有些API可能不兼容，则项目需要重新测试。</p>
</section>
<section id="id1">
<h2>参考</h2>
<ul class="simple">
<li><p><a class="reference external" href="https://guide.daocloud.io/dcs/node-js-9153945.html">Node.js 的发展历程</a><span class="link-target"> [https://guide.daocloud.io/dcs/node-js-9153945.html]</span> - 历史简述可做参考</p></li>
<li><p><a class="reference external" href="http://www.ayqy.net/blog/node-js发展史/">Node.js发展史</a><span class="link-target"> [http://www.ayqy.net/blog/node-js发展史/]</span> 这是Node.js编年史，非常详尽且有很多互联网文档索引链接，对于Node.js历史详情和发展趋势感兴趣可以阅读</p></li>
<li><p><a class="reference external" href="https://www.zhihu.com/question/391604647">koa.js,egg.js,express.js三者有什么区别？</a><span class="link-target"> [https://www.zhihu.com/question/391604647]</span></p></li>
<li><p>「Node.js实战(第2版)」</p></li>
</ul>
</section>
</section>


            <div class="clearer"></div>
          </div>
      </div>
      <div class="clearer"></div>
    </div>
  </body>
</html>