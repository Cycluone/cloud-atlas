<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" /><meta name="generator" content="Docutils 0.17.1: http://docutils.sourceforge.net/" />

    <title>虚拟机内存balloon</title>
    <link rel="stylesheet" href="../_static/pygments.css" type="text/css" />
    <link rel="stylesheet" href="../_static/epub.css" type="text/css" />
    <link rel="stylesheet" href="../_static/theme_overrides.css" type="text/css" /> 
  </head><body>

    <div class="document">
      <div class="documentwrapper">
          <div class="body" role="main">
            
  <section id="balloon">
<span id="memballoon"></span><h1>虚拟机内存balloon</h1>
<div class="admonition warning">
<p class="admonition-title">警告</p>
<p>虚拟机内存balloon需要严格的测试和验证，特别是生产环境：</p>
<ul class="simple">
<li><p>libvirt默认开启了memballoon设备，目前我的经验：在Linux guest虚拟机开启memballoon未发现异常，但是Windows虚拟机(32位和64位)发现虚拟机CPU长时间100%并且导致物理服务器Load极高(即使只分配1~2个vcpu也会导致物理主机所有CPU资源耗尽)。</p></li>
<li><p>memballoon设备不能直接通过 <code class="docutils literal notranslate"><span class="pre">virsh</span> <span class="pre">edit</span> <span class="pre">&lt;dom&gt;</span></code> 删除，但是可以配制成 <code class="docutils literal notranslate"><span class="pre">model=none</span></code> 来关闭，关闭后Windows虚拟机伏在恢复正常。</p></li>
</ul>
</div>
<ul>
<li><p>异常时 <code class="docutils literal notranslate"><span class="pre">dmesg</span> <span class="pre">-T</span></code> 显示:</p>
<div class="highlight-default notranslate"><div class="highlight"><pre><span></span><span class="p">[</span><span class="n">Thu</span> <span class="n">Oct</span> <span class="mi">10</span> <span class="mi">09</span><span class="p">:</span><span class="mi">31</span><span class="p">:</span><span class="mi">52</span> <span class="mi">2019</span><span class="p">]</span> <span class="n">perf</span><span class="p">:</span> <span class="n">interrupt</span> <span class="n">took</span> <span class="n">too</span> <span class="n">long</span> <span class="p">(</span><span class="mi">5038</span> <span class="o">&gt;</span> <span class="mi">5011</span><span class="p">),</span> <span class="n">lowering</span> <span class="n">kernel</span><span class="o">.</span><span class="n">perf_event_max_sample_rate</span> <span class="n">to</span> <span class="mi">39600</span>
<span class="p">[</span><span class="n">Thu</span> <span class="n">Oct</span> <span class="mi">10</span> <span class="mi">09</span><span class="p">:</span><span class="mi">35</span><span class="p">:</span><span class="mi">07</span> <span class="mi">2019</span><span class="p">]</span> <span class="n">perf</span><span class="p">:</span> <span class="n">interrupt</span> <span class="n">took</span> <span class="n">too</span> <span class="n">long</span> <span class="p">(</span><span class="mi">6877</span> <span class="o">&gt;</span> <span class="mi">6297</span><span class="p">),</span> <span class="n">lowering</span> <span class="n">kernel</span><span class="o">.</span><span class="n">perf_event_max_sample_rate</span> <span class="n">to</span> <span class="mi">28800</span>
<span class="p">[</span><span class="n">Thu</span> <span class="n">Oct</span> <span class="mi">10</span> <span class="mi">09</span><span class="p">:</span><span class="mi">35</span><span class="p">:</span><span class="mi">48</span> <span class="mi">2019</span><span class="p">]</span> <span class="n">perf</span><span class="p">:</span> <span class="n">interrupt</span> <span class="n">took</span> <span class="n">too</span> <span class="n">long</span> <span class="p">(</span><span class="mi">8949</span> <span class="o">&gt;</span> <span class="mi">8596</span><span class="p">),</span> <span class="n">lowering</span> <span class="n">kernel</span><span class="o">.</span><span class="n">perf_event_max_sample_rate</span> <span class="n">to</span> <span class="mi">22200</span>
<span class="p">[</span><span class="n">Thu</span> <span class="n">Oct</span> <span class="mi">10</span> <span class="mi">09</span><span class="p">:</span><span class="mi">36</span><span class="p">:</span><span class="mi">06</span> <span class="mi">2019</span><span class="p">]</span> <span class="n">mce</span><span class="p">:</span> <span class="n">CPU3</span><span class="p">:</span> <span class="n">Package</span> <span class="n">temperature</span> <span class="n">above</span> <span class="n">threshold</span><span class="p">,</span> <span class="n">cpu</span> <span class="n">clock</span> <span class="n">throttled</span> <span class="p">(</span><span class="n">total</span> <span class="n">events</span> <span class="o">=</span> <span class="mi">252658</span><span class="p">)</span>
<span class="p">[</span><span class="n">Thu</span> <span class="n">Oct</span> <span class="mi">10</span> <span class="mi">09</span><span class="p">:</span><span class="mi">36</span><span class="p">:</span><span class="mi">06</span> <span class="mi">2019</span><span class="p">]</span> <span class="n">mce</span><span class="p">:</span> <span class="n">CPU2</span><span class="p">:</span> <span class="n">Package</span> <span class="n">temperature</span> <span class="n">above</span> <span class="n">threshold</span><span class="p">,</span> <span class="n">cpu</span> <span class="n">clock</span> <span class="n">throttled</span> <span class="p">(</span><span class="n">total</span> <span class="n">events</span> <span class="o">=</span> <span class="mi">252658</span><span class="p">)</span>
<span class="p">[</span><span class="n">Thu</span> <span class="n">Oct</span> <span class="mi">10</span> <span class="mi">09</span><span class="p">:</span><span class="mi">36</span><span class="p">:</span><span class="mi">06</span> <span class="mi">2019</span><span class="p">]</span> <span class="n">mce</span><span class="p">:</span> <span class="n">CPU0</span><span class="p">:</span> <span class="n">Core</span> <span class="n">temperature</span> <span class="n">above</span> <span class="n">threshold</span><span class="p">,</span> <span class="n">cpu</span> <span class="n">clock</span> <span class="n">throttled</span> <span class="p">(</span><span class="n">total</span> <span class="n">events</span> <span class="o">=</span> <span class="mi">171029</span><span class="p">)</span>
<span class="p">[</span><span class="n">Thu</span> <span class="n">Oct</span> <span class="mi">10</span> <span class="mi">09</span><span class="p">:</span><span class="mi">36</span><span class="p">:</span><span class="mi">06</span> <span class="mi">2019</span><span class="p">]</span> <span class="n">mce</span><span class="p">:</span> <span class="n">CPU1</span><span class="p">:</span> <span class="n">Core</span> <span class="n">temperature</span> <span class="n">above</span> <span class="n">threshold</span><span class="p">,</span> <span class="n">cpu</span> <span class="n">clock</span> <span class="n">throttled</span> <span class="p">(</span><span class="n">total</span> <span class="n">events</span> <span class="o">=</span> <span class="mi">171029</span><span class="p">)</span>
<span class="p">[</span><span class="n">Thu</span> <span class="n">Oct</span> <span class="mi">10</span> <span class="mi">09</span><span class="p">:</span><span class="mi">36</span><span class="p">:</span><span class="mi">06</span> <span class="mi">2019</span><span class="p">]</span> <span class="n">mce</span><span class="p">:</span> <span class="n">CPU0</span><span class="p">:</span> <span class="n">Package</span> <span class="n">temperature</span> <span class="n">above</span> <span class="n">threshold</span><span class="p">,</span> <span class="n">cpu</span> <span class="n">clock</span> <span class="n">throttled</span> <span class="p">(</span><span class="n">total</span> <span class="n">events</span> <span class="o">=</span> <span class="mi">252658</span><span class="p">)</span>
<span class="p">[</span><span class="n">Thu</span> <span class="n">Oct</span> <span class="mi">10</span> <span class="mi">09</span><span class="p">:</span><span class="mi">36</span><span class="p">:</span><span class="mi">06</span> <span class="mi">2019</span><span class="p">]</span> <span class="n">mce</span><span class="p">:</span> <span class="n">CPU1</span><span class="p">:</span> <span class="n">Package</span> <span class="n">temperature</span> <span class="n">above</span> <span class="n">threshold</span><span class="p">,</span> <span class="n">cpu</span> <span class="n">clock</span> <span class="n">throttled</span> <span class="p">(</span><span class="n">total</span> <span class="n">events</span> <span class="o">=</span> <span class="mi">252658</span><span class="p">)</span>
</pre></div>
</div>
</li>
</ul>
<section id="ballooning">
<h2>内存ballooning</h2>
<p>KVM和Xen提供了一个机制能够在Guest运行时修改其使用的内存。这个方式称为内存ballooning，并且这个功能需要Guest操作系统支持才能工作。</p>
<p>virtio balloon设备允许KVM虚拟机降低内存大小(通过放弃内存给host主机)以及增加内存大小(从host主机获取内存)。</p>
<p>这个balloon功能主要是为了支持KVM主机内存的超卖(over-committing memory)。也就是host可以运行所有VM总内存可以大于物理主机实际内存。例如，2G的host主机哦可以运行2个2G内存的VM。</p>
<p>balloon设备对于内存超卖(memory over-commitment)非常重要，因为它可以在需要时降低guest的内存。如果guest需要运行一个消耗更多内存的应用程序，它有可以增加内存。</p>
<p>在 libvirt 中，虚拟机内存分配(以及ballooning能力)是可以通过 <code class="docutils literal notranslate"><span class="pre">memory</span></code> , <code class="docutils literal notranslate"><span class="pre">currentMemory</span></code> 和 <code class="docutils literal notranslate"><span class="pre">memballoon</span></code> 标签来配制的:</p>
<div class="highlight-default notranslate"><div class="highlight"><pre><span></span><span class="o">&lt;</span><span class="n">domain</span> <span class="nb">type</span><span class="o">=</span><span class="s1">&#39;kvm&#39;</span><span class="o">&gt;</span>
  <span class="p">[</span><span class="o">...</span><span class="p">]</span>
  <span class="o">&lt;</span><span class="n">memory</span> <span class="n">unit</span><span class="o">=</span><span class="s1">&#39;KiB&#39;</span><span class="o">&gt;</span><span class="mi">16777216</span><span class="o">&lt;/</span><span class="n">memory</span><span class="o">&gt;</span>
  <span class="o">&lt;</span><span class="n">currentMemory</span> <span class="n">unit</span><span class="o">=</span><span class="s1">&#39;KiB&#39;</span><span class="o">&gt;</span><span class="mi">1048576</span><span class="o">&lt;/</span><span class="n">currentMemory</span><span class="o">&gt;</span>
  <span class="p">[</span><span class="o">...</span><span class="p">]</span>
  <span class="o">&lt;</span><span class="n">devices</span><span class="o">&gt;</span>
    <span class="o">&lt;</span><span class="n">memballoon</span> <span class="n">model</span><span class="o">=</span><span class="s1">&#39;virtio&#39;</span><span class="o">/&gt;</span>
  <span class="o">&lt;/</span><span class="n">devices</span><span class="o">&gt;</span>
<span class="o">&lt;/</span><span class="n">domain</span><span class="o">&gt;</span>
</pre></div>
</div>
<p>Guest使用的内存不能超过 <code class="docutils literal notranslate"><span class="pre">memory</span></code> 指定值，而且这个值是guest启动时使用的内存量。配制的 <code class="docutils literal notranslate"><span class="pre">currentMemory</span></code> 如果设置，则通常小于或等于(默认) <code class="docutils literal notranslate"><span class="pre">memory</span></code> 。这样Guest在启动过程中加载了balloon驱动，就会自己修改成 <code class="docutils literal notranslate"><span class="pre">currentMemry</span></code> 指定值。而 <code class="docutils literal notranslate"><span class="pre">memballoon</span></code> tag是自动加上的，不需要指定它。</p>
<p>使用 <code class="docutils literal notranslate"><span class="pre">virsh</span></code> 命令可以检查每个guest使用的内存配制:</p>
<div class="highlight-default notranslate"><div class="highlight"><pre><span></span><span class="n">virsh</span> <span class="n">dominfo</span> <span class="n">guest</span>
</pre></div>
</div>
<p>例如输出:</p>
<div class="highlight-default notranslate"><div class="highlight"><pre><span></span><span class="n">Id</span><span class="p">:</span>             <span class="o">-</span>
<span class="n">Name</span><span class="p">:</span>           <span class="n">guest</span>
<span class="n">UUID</span><span class="p">:</span>           <span class="mi">4</span><span class="n">f610a1f</span><span class="o">-</span><span class="mi">7539</span><span class="o">-</span><span class="mi">47</span><span class="n">cf</span><span class="o">-</span><span class="mi">8299</span><span class="o">-</span><span class="mi">9534500</span><span class="n">b340d</span>
<span class="n">OS</span> <span class="n">Type</span><span class="p">:</span>        <span class="n">hvm</span>
<span class="n">State</span><span class="p">:</span>          <span class="n">shut</span> <span class="n">off</span>
<span class="n">CPU</span><span class="p">(</span><span class="n">s</span><span class="p">):</span>         <span class="mi">1</span>
<span class="n">Max</span> <span class="n">memory</span><span class="p">:</span>     <span class="mi">16777216</span> <span class="n">kB</span>
<span class="n">Used</span> <span class="n">memory</span><span class="p">:</span>    <span class="mi">1048576</span> <span class="n">kB</span>
<span class="n">Persistent</span><span class="p">:</span>     <span class="n">yes</span>
<span class="n">Autostart</span><span class="p">:</span>      <span class="n">disable</span>
<span class="n">Managed</span> <span class="n">save</span><span class="p">:</span>   <span class="n">no</span>
</pre></div>
</div>
<p>注意，这里 <code class="docutils literal notranslate"><span class="pre">memory</span></code> 的值高于使用内存，所以我们能够动态修改Linux guest的分配内存。</p>
<p>注意，当Linux作为guest时候，即使它具备了balloon驱动，并且 <code class="docutils literal notranslate"><span class="pre">memory</span></code> 设置值比 <code class="docutils literal notranslate"><span class="pre">currentMemroy</span></code> 高，guest操作系统依然不能看到(或使用)多余的那部分内存。这里libvirt报告的 <code class="docutils literal notranslate"><span class="pre">Used</span> <span class="pre">memory</span></code> 就是guest能够看到和访问的内存。</p>
<div class="admonition note">
<p class="admonition-title">注解</p>
<p>不过，我在实践中发现Windows虚拟机能够看到所有的 <code class="docutils literal notranslate"><span class="pre">memory</span></code> 设置内存。</p>
</div>
<p>在Guest虚拟机运行时，可以动态调整具备 <code class="docutils literal notranslate"><span class="pre">memballoon</span></code> 的虚拟机内存。</p>
</section>
<section id="id1">
<h2>动态调整虚拟机配置</h2>
<div class="admonition note">
<p class="admonition-title">注解</p>
<p>以下操作步骤在 <code class="docutils literal notranslate"><span class="pre">xcloud</span></code> 物理主机上执行，展示如何在虚拟机运行状态下 <code class="docutils literal notranslate"><span class="pre">动态调整</span></code> 虚拟机VCPU数量和内存大小。</p>
</div>
<ul>
<li><p>动态调整虚拟机内存 4G:</p>
<div class="highlight-default notranslate"><div class="highlight"><pre><span></span><span class="n">virsh</span> <span class="n">setmem</span> <span class="n">devstack</span> <span class="mi">4</span><span class="n">G</span>
</pre></div>
</div>
</li>
<li><p>动态调整虚拟机VCPU为2个:</p>
<div class="highlight-default notranslate"><div class="highlight"><pre><span></span><span class="n">virsh</span> <span class="n">setvcpus</span> <span class="n">devstack</span> <span class="mi">2</span>
</pre></div>
</div>
</li>
</ul>
<div class="admonition note">
<p class="admonition-title">注解</p>
<p>动态设置方法可以参考 <a class="reference external" href="https://github.com/huataihuang/cloud-atlas-draft/blob/master/virtual/kvm/startup/in_action/add_remove_vcpu_memory_to_guest_on_fly.md">动态调整KVM虚拟机内存和vcpu实战</a><span class="link-target"> [https://github.com/huataihuang/cloud-atlas-draft/blob/master/virtual/kvm/startup/in_action/add_remove_vcpu_memory_to_guest_on_fly.md]</span></p>
</div>
</section>
<section id="id2">
<h2>自动化ballooning</h2>
<p>QEMU在2013年还实验性加入了一个自动化ballooning。</p>
<p>当前balloon设备完全是手工操作的。自动化balloon提供了一种在内存负载压力增大情况下自动增加内存配制，以及自动反向收缩的能力。</p>
<p>通过libvirt guest配制可以开启自动化ballooning:</p>
<div class="highlight-default notranslate"><div class="highlight"><pre><span></span><span class="o">&lt;</span><span class="n">memballoon</span> <span class="n">model</span><span class="o">=</span><span class="s1">&#39;virtio&#39;</span><span class="o">&gt;</span>
</pre></div>
</div>
<p>增加一个参数 <code class="docutils literal notranslate"><span class="pre">autodeflate</span></code> ，该参数默认是 <code class="docutils literal notranslate"><span class="pre">off</span></code> ，设置为 <code class="docutils literal notranslate"><span class="pre">on</span></code> 就激活了自动ballooning:</p>
<div class="highlight-default notranslate"><div class="highlight"><pre><span></span><span class="o">&lt;</span><span class="n">memballoon</span> <span class="n">model</span><span class="o">=</span><span class="s1">&#39;virtio&#39;</span> <span class="n">autodeflate</span><span class="o">=</span><span class="s1">&#39;on&#39;</span><span class="o">&gt;</span>
</pre></div>
</div>
<p>以上是通过libvirt来启用memballoon设备的自动ballooning。如果你没有使用libvirt，也可以手工调用qemu，即需要增加一个 <code class="docutils literal notranslate"><span class="pre">,automatic=true</span></code> 来配制balloon设备。例如， <code class="docutils literal notranslate"><span class="pre">-device</span> <span class="pre">virtio-balloon,automatic=true</span></code> 。</p>
<p>这个自动ballooning需要qemu/kvm 1.3.或更高版本。</p>
</section>
<section id="id3">
<h2>参考</h2>
<ul class="simple">
<li><p><a class="reference external" href="https://libvirt.org/formatdomain.html#elementsMemBalloon">Libvirt文档 - Memory balloon device</a><span class="link-target"> [https://libvirt.org/formatdomain.html#elementsMemBalloon]</span></p></li>
<li><p><a class="reference external" href="https://serverfault.com/questions/899760/qemu-kvm-reclamation-of-memory-from-low-use-guests">qemu-kvm reclamation of memory from low-use guests</a><span class="link-target"> [https://serverfault.com/questions/899760/qemu-kvm-reclamation-of-memory-from-low-use-guests]</span></p></li>
<li><p><a class="reference external" href="http://www.espenbraastad.no/posts/memory-ballooning/">KVM/Xen and libvirt: currentMemory, memory and ballooning. Where did my memory go?</a><span class="link-target"> [http://www.espenbraastad.no/posts/memory-ballooning/]</span></p></li>
<li><p><a class="reference external" href="https://rwmj.wordpress.com/2010/07/17/virtio-balloon/">Virtio balloon</a><span class="link-target"> [https://rwmj.wordpress.com/2010/07/17/virtio-balloon/]</span></p></li>
</ul>
</section>
</section>


            <div class="clearer"></div>
          </div>
      </div>
      <div class="clearer"></div>
    </div>
  </body>
</html>