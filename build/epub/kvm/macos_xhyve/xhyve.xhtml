<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" /><meta name="generator" content="Docutils 0.17.1: http://docutils.sourceforge.net/" />

    <title>xhyve - macOS平台的KVM</title>
    <link rel="stylesheet" href="../../_static/pygments.css" type="text/css" />
    <link rel="stylesheet" href="../../_static/epub.css" type="text/css" />
    <link rel="stylesheet" href="../../_static/theme_overrides.css" type="text/css" /> 
  </head><body>

    <div class="document">
      <div class="documentwrapper">
          <div class="body" role="main">
            
  <section id="xhyve-macoskvm">
<span id="xhyve"></span><h1>xhyve - macOS平台的KVM</h1>
<p>我个人使用MacBook Pro作为工作笔记本，使用的是macOS操作系统。macOS兼具精美方便的图形界面和灵活强大的Unix核心工具，对于开发和运维工作非常友好。macOS虽然没有KVM这样经过大量服务运维验证的虚拟化方案，但是实际上也有基于开源 <a class="reference external" href="http://bhyve.org">bhyve</a><span class="link-target"> [http://bhyve.org]</span> port到OS X的开源项目 <a class="reference external" href="https://github.com/mist64/xhyve">xhyve hypervisor</a><span class="link-target"> [https://github.com/mist64/xhyve]</span> 。</p>
<p>xhyve构建在OS X 10.10的 <a class="reference external" href="https://developer.apple.com/documentation/hypervisor">Hypervisor.framework</a><span class="link-target"> [https://developer.apple.com/documentation/hypervisor]</span> ，完全运行在用户空间，没有其他依赖。</p>
<div class="admonition note">
<p class="admonition-title">注解</p>
<p>在macOS上，可以基于系统内建的hypervisor能力 <a class="reference internal" href="../../docker/startup/install_docker_macos.xhtml#install-docker-macos"><span class="std std-ref">macOS安装Docker</span></a> 和 <a class="reference internal" href="../../kubernetes/startup_prepare/install_run_minikube.xhtml#install-run-minikube"><span class="std std-ref">安装和运行minikube</span></a> ，这两个重量级的开源项目在macOS上都使用了基于 xhyve 开发的工具集 <a class="reference internal" href="../../docker/moby/hyperkit/index.xhtml#hyperkit"><span class="std std-ref">hyperkit</span></a> 。</p>
</div>
<section id="id1">
<h2>xhyve安装</h2>
<section id="homebrewxhyve">
<h3>通过homebrew安装xhyve</h3>
<p>xhyve hypervisor安装有多种方法，最简单的是通过homebrew:</p>
<div class="highlight-default notranslate"><div class="highlight"><pre><span></span><span class="o">/</span><span class="n">usr</span><span class="o">/</span><span class="nb">bin</span><span class="o">/</span><span class="n">ruby</span> <span class="o">-</span><span class="n">e</span> <span class="s2">&quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;</span>

<span class="n">brew</span> <span class="n">update</span>
<span class="n">brew</span> <span class="n">install</span> <span class="o">--</span><span class="n">HEAD</span> <span class="n">xhyve</span>
</pre></div>
</div>
<div class="admonition note">
<p class="admonition-title">注解</p>
<p><a class="reference external" href="https://brew.sh/">Homebrew</a><span class="link-target"> [https://brew.sh/]</span> 官方提供了安装指南</p>
<p><code class="docutils literal notranslate"><span class="pre">--HEAD</span></code> 在brew命令中确保总是获得最新修改，即使homebrew数据库还没有更新。</p>
<p>如果重新安装， <code class="docutils literal notranslate"><span class="pre">brew</span></code> 也提供了 <code class="docutils literal notranslate"><span class="pre">reinstall</span></code> 命令，即 <code class="docutils literal notranslate"><span class="pre">brew</span> <span class="pre">reinstall</span> <span class="pre">xhyve</span></code></p>
</div>
</section>
<section id="macportsxhyve">
<h3>通过MacPorts安装xhyve</h3>
<p>使用MacPorts则简单执行:</p>
<div class="highlight-default notranslate"><div class="highlight"><pre><span></span><span class="n">sudo</span> <span class="n">port</span> <span class="n">selfupdate</span>
<span class="n">sudo</span> <span class="n">port</span> <span class="n">install</span> <span class="n">xhyve</span>
</pre></div>
</div>
</section>
<section id="id2">
<h3>通过源代码编译安装xhyve</h3>
<p>下载源代码进行编译:</p>
<div class="highlight-default notranslate"><div class="highlight"><pre><span></span><span class="n">git</span> <span class="n">clone</span> <span class="n">https</span><span class="p">:</span><span class="o">//</span><span class="n">github</span><span class="o">.</span><span class="n">com</span><span class="o">/</span><span class="n">machyve</span><span class="o">/</span><span class="n">xhyve</span><span class="o">.</span><span class="n">git</span>
<span class="n">cd</span> <span class="n">xhyve</span>
<span class="n">xcodebuild</span>
</pre></div>
</div>
<p>编译后执行程序位于 <code class="docutils literal notranslate"><span class="pre">build/Release/xhyve</span></code> 。 在最新的 macOS Mojave 10.14.1 编译成功，运行 <code class="docutils literal notranslate"><span class="pre">xhyve</span> <span class="pre">-h</span></code> 失败，显示:</p>
<div class="highlight-default notranslate"><div class="highlight"><pre><span></span><span class="n">Killed</span><span class="p">:</span> <span class="mi">9</span>
</pre></div>
</div>
<p>不过，实际上发现，使用完整的路径运行 <code class="docutils literal notranslate"><span class="pre">buid/xhyve</span></code> 则可以正常工作:</p>
<div class="highlight-default notranslate"><div class="highlight"><pre><span></span><span class="o">/</span><span class="n">Users</span><span class="o">/</span><span class="n">huatai</span><span class="o">/</span><span class="n">github</span><span class="o">/</span><span class="n">xhyve</span><span class="o">/</span><span class="n">build</span><span class="o">/</span><span class="n">xhyve</span> <span class="o">-</span><span class="n">h</span>
</pre></div>
</div>
<div class="admonition note">
<p class="admonition-title">注解</p>
<p>在我的实践中，采用的是源代码编译安装的xhyve。</p>
</div>
</section>
</section>
<section id="xhyveubuntu">
<h2>在xhyve中安装Ubuntu</h2>
<ul>
<li><p><a class="reference external" href="https://help.ubuntu.com/community/Installation/MinimalCD">Installation/MinimalCD</a><span class="link-target"> [https://help.ubuntu.com/community/Installation/MinimalCD]</span> 提供了通过网络安装的netinstall镜像。</p></li>
<li><p>下载 <a class="reference external" href="http://archive.ubuntu.com/ubuntu/dists/bionic/main/installer-amd64/current/images/netboot/mini.iso">Ubuntu 18.04 “Bionic Beaver”</a><span class="link-target"> [http://archive.ubuntu.com/ubuntu/dists/bionic/main/installer-amd64/current/images/netboot/mini.iso]</span> 的网络安装镜像 mini.iso ，使用以下方法复制出安装镜像中的启动内核:</p>
<div class="highlight-default notranslate"><div class="highlight"><pre><span></span><span class="n">dd</span> <span class="k">if</span><span class="o">=/</span><span class="n">dev</span><span class="o">/</span><span class="n">zero</span> <span class="n">bs</span><span class="o">=</span><span class="mi">2</span><span class="n">k</span> <span class="n">count</span><span class="o">=</span><span class="mi">1</span> <span class="n">of</span><span class="o">=</span><span class="n">tmp</span><span class="o">.</span><span class="n">iso</span>
<span class="n">dd</span> <span class="k">if</span><span class="o">=</span><span class="n">mini</span><span class="o">.</span><span class="n">iso</span> <span class="n">bs</span><span class="o">=</span><span class="mi">2</span><span class="n">k</span> <span class="n">skip</span><span class="o">=</span><span class="mi">1</span> <span class="o">&gt;&gt;</span> <span class="n">tmp</span><span class="o">.</span><span class="n">iso</span>
<span class="n">hdiutil</span> <span class="n">attach</span> <span class="n">tmp</span><span class="o">.</span><span class="n">iso</span>

<span class="n">mkdir</span> <span class="n">install</span>
<span class="n">cp</span> <span class="o">/</span><span class="n">Volumes</span><span class="o">/</span><span class="n">CDROM</span><span class="o">/</span><span class="n">linux</span> <span class="o">./</span><span class="n">install</span><span class="o">/</span>
<span class="n">cp</span> <span class="o">/</span><span class="n">Volumes</span><span class="o">/</span><span class="n">CDROM</span><span class="o">/</span><span class="n">initrd</span><span class="o">.</span><span class="n">gz</span> <span class="o">./</span><span class="n">install</span><span class="o">/</span>

<span class="c1"># After finish copy</span>
<span class="n">umount</span> <span class="o">/</span><span class="n">Volumes</span><span class="o">/</span><span class="n">CDROM</span>
</pre></div>
</div>
</li>
<li><p>创建磁盘镜像文件:</p>
<div class="highlight-default notranslate"><div class="highlight"><pre><span></span><span class="n">dd</span> <span class="k">if</span><span class="o">=/</span><span class="n">dev</span><span class="o">/</span><span class="n">zero</span> <span class="n">of</span><span class="o">=</span><span class="n">ubuntu18</span><span class="o">.</span><span class="n">img</span> <span class="n">bs</span><span class="o">=</span><span class="mi">1</span><span class="n">g</span> <span class="n">count</span><span class="o">=</span><span class="mi">16</span>
</pre></div>
</div>
</li>
<li><p>创建安装脚本 <code class="docutils literal notranslate"><span class="pre">install.sh</span></code></p>
<div class="highlight-default notranslate"><div class="highlight"><pre><span></span>#!/bin/bash
KERNEL=&quot;install/linux&quot;
INITRD=&quot;install/initrd.gz&quot;
CMDLINE=&quot;earlyprintk=serial console=ttyS0&quot;

# Guest Config
CPU=&quot;-c 2&quot;
MEM=&quot;-m 2G&quot;
PCI_DEV=&quot;-s 0:0,hostbridge -s 31,lpc&quot;
NET=&quot;-s 2:0,virtio-net,en0&quot;
IMG_CD=&quot;-s 3:0,ahci-cd,mini.iso&quot;
IMG_HDD=&quot;-s 4:0,virtio-blk,ubuntu18.img&quot;
LPC_DEV=&quot;-l com1,stdio&quot;
ACPI=&quot;-A&quot;

# and now run
sudo /Users/huatai/github/xhyve/build/xhyve $ACPI $CPU $MEM $PCI_DEV $LPC_DEV $NET $IMG_CD $IMG_HDD -f kexec,$KERNEL,$INITRD,&quot;$CMDLINE&quot;
</pre></div>
</div>
</li>
<li><p>运行安装:</p>
<div class="highlight-default notranslate"><div class="highlight"><pre><span></span><span class="n">sh</span> <span class="n">install</span><span class="o">.</span><span class="n">sh</span>
</pre></div>
</div>
</li>
</ul>
<section id="ubuntu">
<h3>安装Ubuntu的建议</h3>
<ul>
<li><p>安装全程采用字符终端交互，通过TAB键切换，主要是选择语言（English）和locate，我都采用默认。在选择安装下载的镜像网站则选择中国。</p></li>
<li><p>磁盘分区需要使用整个磁盘分区并设置为EXT4文件系统。我测试过 <code class="docutils literal notranslate"><span class="pre">/dev/vda2</span></code> 采用btrfs文件系统但是安装后无法启动（虽然在Fedora系统中root文件系统使用btrfs是可以启动的。</p></li>
<li><p>只选择安装OpenSSH server，这样镜像是最基本系统，后续再不断叠加按需安装</p></li>
<li><p>安装最后的 <code class="docutils literal notranslate"><span class="pre">Finish</span> <span class="pre">the</span> <span class="pre">installation</span> <span class="pre">-&gt;</span> <span class="pre">Installation</span> <span class="pre">complete</span></code> 步骤，注意不要直接回车 <code class="docutils literal notranslate"><span class="pre">&lt;Continue&gt;</span></code> ，而是要选择 <code class="docutils literal notranslate"><span class="pre">&lt;Go</span> <span class="pre">Back&gt;</span></code></p>
<div class="highlight-default notranslate"><div class="highlight"><pre><span></span> ┌───────────────────┤ [!!] Finish the installation ├────────────────────┐
 │                                                                       │
┌│                         Installation complete                         │
││ Installation is complete, so it is time to boot into your new system. │
││ Make sure to remove the installation media (CD-ROM, floppies), so     │
││ that you boot into the new system rather than restarting the          │
││ installation.                                                         │
││                                                                       │
└│     &lt;Go Back&gt;                                          &lt;Continue&gt;     │
 │                                                                       │
 └───────────────────────────────────────────────────────────────────────┘
</pre></div>
</div>
</li>
</ul>
<p>然后选择参考 <code class="docutils literal notranslate"><span class="pre">Execute</span> <span class="pre">a</span> <span class="pre">shell</span></code> ，在交互终端中执行以下命令获取IP地址:</p>
<div class="highlight-default notranslate"><div class="highlight"><pre><span></span><span class="n">ip</span> <span class="n">addr</span>   <span class="c1"># 检查虚拟机的IP地址，例如 192.168.64.5</span>
</pre></div>
</div>
<p>再执行以下命令，在虚拟机内部启动一个nc命令，准备传输内核启动目录 <code class="docutils literal notranslate"><span class="pre">/boot</span></code></p>
<div class="highlight-default notranslate"><div class="highlight"><pre><span></span><span class="n">cd</span> <span class="o">/</span><span class="n">target</span>
<span class="n">tar</span> <span class="n">c</span> <span class="n">boot</span> <span class="o">|</span> <span class="n">nc</span> <span class="o">-</span><span class="n">l</span> <span class="o">-</span><span class="n">p</span> <span class="mi">1234</span>
</pre></div>
</div>
<p>回到macOS中（Host主机），执行以下命令，将虚拟机中 <code class="docutils literal notranslate"><span class="pre">/boot</span></code> 目录传出:</p>
<div class="highlight-default notranslate"><div class="highlight"><pre><span></span><span class="n">nc</span> <span class="mf">192.168</span><span class="o">.</span><span class="mf">64.5</span> <span class="mi">1234</span> <span class="o">|</span> <span class="n">tar</span> <span class="n">x</span>
</pre></div>
</div>
<p>此时在物理机macOS目录下就有了一个 <code class="docutils literal notranslate"><span class="pre">boot</span></code> 子目录，这个目录中包含了用于启动虚拟机引导的内核文件。</p>
<ul class="simple">
<li><p>返回xhyve虚拟机内部，选择 <code class="docutils literal notranslate"><span class="pre">Finish</span> <span class="pre">the</span> <span class="pre">installation</span></code> 结束安装。</p></li>
</ul>
</section>
</section>
<section id="id3">
<h2>在xhyve中运行Ubuntu</h2>
<ul>
<li><p>创建 <code class="docutils literal notranslate"><span class="pre">run.sh</span></code> 脚本:</p>
<div class="highlight-default notranslate"><div class="highlight"><pre><span></span>#!/bin/bash
KERNEL=&quot;boot/vmlinuz-4.15.0-45-generic&quot;
INITRD=&quot;boot/initrd.img-4.15.0-45-generic&quot;
#DON&#39;T use &#39;acpi=off&#39;, refer https://github.com/machyve/xhyve/issues/161
#CMDLINE=&quot;earlyprintk=serial console=ttyS0 acpi=off root=/dev/vda1 ro&quot;
CMDLINE=&quot;earlyprintk=serial console=ttyS0 root=/dev/vda1 ro&quot;
UUID=&quot;-U 8e7af180-c54d-4aa2-9bef-59d94a1ac572&quot; # A UUID will ensure we get a consistent ip address assigned
# Guest Config
CPU=&quot;-c 2&quot;
MEM=&quot;-m 2G&quot;
PCI_DEV=&quot;-s 0:0,hostbridge -s 31,lpc&quot;
NET=&quot;-s 2:0,virtio-net,en0&quot;
IMG_HDD=&quot;-s 4:0,virtio-blk,ubuntu18.img&quot;
LPC_DEV=&quot;-l com1,stdio&quot;
ACPI=&quot;-A&quot;

# and now run
sudo /Users/huatai/github/xhyve/build/xhyve $UUID $ACPI $CPU $MEM $PCI_DEV $LPC_DEV $NET $IMG_HDD -f kexec,$KERNEL,$INITRD,&quot;$CMDLINE&quot;
</pre></div>
</div>
</li>
</ul>
<div class="admonition note">
<p class="admonition-title">注解</p>
<p>这里的关键点是不要使用参数 <code class="docutils literal notranslate"><span class="pre">acpi=off</span></code> 参数，否则会导致虚拟机启动挂起 - <a class="reference external" href="https://github.com/machyve/xhyve/issues/161">Install Ubuntu 18 by netinstall is good, but boot from virtio_blk vda hang #161</a><span class="link-target"> [https://github.com/machyve/xhyve/issues/161]</span></p>
</div>
<ul>
<li><p>运行虚拟机:</p>
<div class="highlight-default notranslate"><div class="highlight"><pre><span></span><span class="n">sh</span> <span class="n">run</span><span class="o">.</span><span class="n">sh</span>
</pre></div>
</div>
</li>
<li><p>在macOS物理主机上运行任何VPN程序，在退出VPN时候会导致虚拟机网路无法连接，则通过如下脚本恢复网络 <code class="docutils literal notranslate"><span class="pre">masq.sh</span></code></p>
<div class="highlight-default notranslate"><div class="highlight"><pre><span></span>#!/bin/bash
interfaces=( $(netstat -in | egrep &#39;utun\d .*\d+\.\d+\.\d+\.\d+&#39; | cut -d &#39; &#39; -f 1) )
rulefile=&quot;rules.tmp&quot;
echo &quot;&quot; &gt; $rulefile
sudo pfctl -a com.apple/tun -F nat
for i in &quot;${interfaces[@]}&quot;
do
  RULE=&quot;nat on ${i} proto {tcp, udp, icmp} from 192.168.64.0/24 to any -&gt; ${i}&quot;
  echo $RULE &gt;&gt; $rulefile
done
sudo pfctl -a com.apple/tun -f $rulefile
</pre></div>
</div>
</li>
</ul>
</section>
</section>


            <div class="clearer"></div>
          </div>
      </div>
      <div class="clearer"></div>
    </div>
  </body>
</html>