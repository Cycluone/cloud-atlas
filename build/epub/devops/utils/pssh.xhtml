<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" /><meta name="generator" content="Docutils 0.17.1: http://docutils.sourceforge.net/" />

    <title>pssh - 并行SSH</title>
    <link rel="stylesheet" href="../../_static/pygments.css" type="text/css" />
    <link rel="stylesheet" href="../../_static/epub.css" type="text/css" />
    <link rel="stylesheet" href="../../_static/theme_overrides.css" type="text/css" /> 
  </head><body>

    <div class="document">
      <div class="documentwrapper">
          <div class="body" role="main">
            
  <section id="pssh-ssh">
<span id="pssh"></span><h1>pssh - 并行SSH</h1>
<p>在维护集群时，常常需要在大量服务器上执行相同的命令，虽然可以自己写循环执行脚本，但是不仅麻烦而且执行效率不高。此时我们通常会使用pssh工具来并发执行SSH指令。</p>
<p>我个人觉得pssh是每个SA的必备工具，非常适合需要执行少量应急命令的情况。但是，这个强大的并行命令也是双刃剑，执行效率太高也会使得误操作影响面扩大。所以，一定要谨慎操作，并且我强烈建议在测试环境做好演练，同时review操作命令，注意检查判断逻辑。</p>
<p>可行的情况下，还是以执行脚本来完成操作，pssh仅作为批量分发脚本以及批量执行脚本check脚本执行结果为好。因为脚本相对容易避免转义符号冲突，也方便检查代码。</p>
<div class="admonition note">
<p class="admonition-title">注解</p>
<p>pssh是早期在Python 2上开发的工具，最早开源在google code上，后来代码库搬迁到github <a class="reference external" href="https://github.com/robinbowes/pssh">robinbowes/pssh</a><span class="link-target"> [https://github.com/robinbowes/pssh]</span> 已经很久没有更新了(最后更新是2012年)，甚至在 <a class="reference external" href="https://pypi.org/project/pssh">pssh · PyPI</a><span class="link-target"> [https://pypi.org/project/pssh]</span> 也没有说明这个软件包在Python 3上运行是存在兼容问题的。不过，Github上 <a class="reference external" href="https://github.com/lilydjwg/pssh">lilydjwg/pssh</a><span class="link-target"> [https://github.com/lilydjwg/pssh]</span> 提供了兼容Python 3的修正。</p>
</div>
<section id="id1">
<h2>安装pssh</h2>
<section id="ubuntupssh">
<h3>Ubuntu安装pssh</h3>
<p>在Ubuntu上通过安装 <code class="docutils literal notranslate"><span class="pre">pssh</span></code> 软件包可以完成安装，但是直接执行 <code class="docutils literal notranslate"><span class="pre">pssh</span></code> 命令会提示无法找到指令。实际上Ubuntu安装 <code class="docutils literal notranslate"><span class="pre">pssh</span></code> 软件包后实际的执行程序是采用了 <code class="docutils literal notranslate"><span class="pre">parallel-</span></code> 开头的命令，例如 <code class="docutils literal notranslate"><span class="pre">parallel-ssh</span></code> 和 <code class="docutils literal notranslate"><span class="pre">parallel-scp</span></code> 等。所以，为了方便使用，可以建立软链接:</p>
<div class="highlight-default notranslate"><div class="highlight"><pre><span></span><span class="n">cd</span> <span class="o">/</span><span class="n">usr</span><span class="o">/</span><span class="nb">bin</span>
<span class="n">sudo</span> <span class="n">ln</span> <span class="o">-</span><span class="n">s</span> <span class="n">parallel</span><span class="o">-</span><span class="n">ssh</span> <span class="n">pssh</span>
<span class="n">sudo</span> <span class="n">ln</span> <span class="o">-</span><span class="n">s</span> <span class="n">parallel</span><span class="o">-</span><span class="n">scp</span> <span class="n">pscp</span>
<span class="n">sudo</span> <span class="n">ln</span> <span class="o">-</span><span class="n">s</span> <span class="n">parallel</span><span class="o">-</span><span class="n">rsync</span> <span class="n">prsync</span>
<span class="n">sudo</span> <span class="n">ln</span> <span class="o">-</span><span class="n">s</span> <span class="n">parallel</span><span class="o">-</span><span class="n">nuke</span> <span class="n">pnuke</span>
<span class="n">sudo</span> <span class="n">ln</span> <span class="o">-</span><span class="n">s</span> <span class="n">parallel</span><span class="o">-</span><span class="n">slurp</span> <span class="n">pslurp</span>
</pre></div>
</div>
</section>
<section id="centosmpssh">
<h3>CentOS安装mpssh</h3>
<p>CentOS可以使用EPEL安装pssh，但是现在(CentOS 8)只提供MPSSH(Mass Parallel Secure Shell)来并发执行SSH:</p>
<div class="highlight-default notranslate"><div class="highlight"><pre><span></span><span class="n">dnf</span> <span class="o">--</span><span class="n">enablerepo</span><span class="o">=</span><span class="n">epel</span> <span class="o">-</span><span class="n">y</span> <span class="n">install</span> <span class="n">mpssh</span>
</pre></div>
</div>
<p>使用方法和pssh类似，但是没有提供 <code class="docutils literal notranslate"><span class="pre">-A</span></code> 参数，所以只能使用密钥认证，无法使用密码认证。这个问题我主要通过复用ssh连接方式解决，即在 <code class="docutils literal notranslate"><span class="pre">~/.ssh/config</span></code> 中添加配置:</p>
<div class="highlight-default notranslate"><div class="highlight"><pre><span></span><span class="n">Host</span> <span class="o">*</span>
    <span class="n">ServerAliveInterval</span> <span class="mi">60</span>
    <span class="n">StrictHostKeyChecking</span> <span class="n">no</span>
    <span class="c1"># 以下3行配置提供了ssh复用，即只需要登陆一次服务器，后续ssh登陆将基于第一次登陆的通道</span>
    <span class="n">ControlMaster</span> <span class="n">auto</span>
    <span class="n">ControlPath</span> <span class="o">~/.</span><span class="n">ssh</span><span class="o">/%</span><span class="n">h</span><span class="o">-%</span><span class="n">p</span><span class="o">-%</span><span class="n">r</span>
    <span class="n">ControlPersist</span> <span class="n">yes</span>
</pre></div>
</div>
<p>然后执行一次循环ssh登陆建立连接(因为ssh命令提供了传递密码的方法):</p>
<div class="highlight-default notranslate"><div class="highlight"><pre><span></span>for i in `cat host`;do sshpass &lt;password&gt; ssh &lt;username&gt;@$i uptime;done
</pre></div>
</div>
<p>之后就可以通过 <code class="docutils literal notranslate"><span class="pre">mpssh</span></code> 并发执行ssh命令。</p>
</section>
<section id="pip">
<h3>通过pip安装(推荐使用这个通用方法安装)</h3>
<p>pssh实际上是一个python程序，所以可以通过 Python pip方式安装。通过pip安装可以用于Python 2环境通用，而且，通过Python virtualenv方式，可以自主在个人用户目录下安装，非常方便。</p>
<div class="highlight-default notranslate"><div class="highlight"><pre><span></span><span class="c1"># 如果是RHEL/CentOS则使用以下yum安装命令</span>
<span class="n">yum</span> <span class="n">install</span> <span class="n">python</span><span class="o">-</span><span class="n">pip</span>
<span class="c1"># 如果是Debian/Ubuntu则使用以下apt安装命令</span>
<span class="n">apt</span> <span class="n">install</span> <span class="n">python</span><span class="o">-</span><span class="n">pip</span>

<span class="c1"># 通过pip安装pssh</span>
<span class="n">pip</span> <span class="n">install</span> <span class="n">pssh</span>
</pre></div>
</div>
<div class="admonition note">
<p class="admonition-title">注解</p>
<p>我在Python 3的virtualenv中通过pip安装了pssh之后，执行报错:</p>
<div class="highlight-default notranslate"><div class="highlight"><pre><span></span><span class="n">Traceback</span> <span class="p">(</span><span class="n">most</span> <span class="n">recent</span> <span class="n">call</span> <span class="n">last</span><span class="p">):</span>
  <span class="n">File</span> <span class="s2">&quot;/Users/huatai/venv3/bin/pssh&quot;</span><span class="p">,</span> <span class="n">line</span> <span class="mi">26</span><span class="p">,</span> <span class="ow">in</span> <span class="o">&lt;</span><span class="n">module</span><span class="o">&gt;</span>
    <span class="kn">from</span> <span class="nn">psshlib.cli</span> <span class="kn">import</span> <span class="n">common_parser</span><span class="p">,</span> <span class="n">common_defaults</span>
  <span class="n">File</span> <span class="s2">&quot;/Users/huatai/venv3/lib/python3.7/site-packages/psshlib/cli.py&quot;</span><span class="p">,</span> <span class="n">line</span> <span class="mi">9</span><span class="p">,</span> <span class="ow">in</span> <span class="o">&lt;</span><span class="n">module</span><span class="o">&gt;</span>
    <span class="kn">import</span> <span class="nn">version</span>
<span class="ne">ModuleNotFoundError</span><span class="p">:</span> <span class="n">No</span> <span class="n">module</span> <span class="n">named</span> <span class="s1">&#39;version&#39;</span>
</pre></div>
</div>
</div>
<p>参考 <a class="reference external" href="https://blog.csdn.net/wjzholmes/article/details/102239639">pssh的安装和问题</a><span class="link-target"> [https://blog.csdn.net/wjzholmes/article/details/102239639]</span> 改为使用 Python 2的virtualenv环境就可以解决。</p>
</section>
<section id="virtualenvpssh">
<h3>在virtualenv中安装pssh(强烈推荐)</h3>
<p>上文已经推荐了通过 <code class="docutils literal notranslate"><span class="pre">pip</span></code> 安装pssh，不过是全局安装需要root权限。实际上pssh是一个python程序，所以可以通过 <a class="reference internal" href="../../python/startup/virtualenv.xhtml#virtualenv"><span class="std std-ref">Python virtualenv</span></a> 来安装部署:</p>
<div class="highlight-default notranslate"><div class="highlight"><pre><span></span><span class="n">yum</span> <span class="o">-</span><span class="n">y</span> <span class="n">update</span>
<span class="n">yum</span> <span class="o">-</span><span class="n">y</span> <span class="n">install</span> <span class="n">python</span><span class="o">-</span><span class="n">pip</span>

<span class="n">pip2</span> <span class="n">install</span> <span class="n">virtualenv</span>
<span class="n">virtualenv</span> <span class="n">venv2</span>
</pre></div>
</div>
<ul>
<li><p>如果没有系统root权限，无法通过yum安装 python-pip ，就可以通过互联网安装pip，安装到自己工作目录下 <code class="docutils literal notranslate"><span class="pre">/home/admin/.local/bin</span></code></p>
<div class="highlight-default notranslate"><div class="highlight"><pre><span></span>curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py
python2 get-pip.py

# 不要忘记添加 /home/admin/.local/bin 到 profile中
echo &quot;export PATH=$HOME/.local/bin:$PATH&quot; &gt;&gt; $HOME/.bashrc

. $HOME/.bashrc
pip2 install virtualenv
virtualenv venv2
</pre></div>
</div>
</li>
<li><p>在virtualenv中安装pssh:</p>
<div class="highlight-default notranslate"><div class="highlight"><pre><span></span><span class="n">source</span> <span class="n">venv2</span><span class="o">/</span><span class="nb">bin</span><span class="o">/</span><span class="n">activate</span>
<span class="n">pip</span> <span class="n">install</span> <span class="n">pssh</span>
</pre></div>
</div>
</li>
</ul>
</section>
</section>
<section id="id3">
<h2>命令说明</h2>
<table class="colwidths-given docutils align-default" id="id9">
<caption><span class="caption-text">pssh命令说明</span></caption>
<colgroup>
<col style="width: 33%" />
<col style="width: 67%" />
</colgroup>
<thead>
<tr class="row-odd"><th class="head"><p>命令</p></th>
<th class="head"><p>说明</p></th>
</tr>
</thead>
<tbody>
<tr class="row-even"><td><p>pssh</p></td>
<td><p>并行在多个远程主机上执行ssh命令</p></td>
</tr>
<tr class="row-odd"><td><p>pscp</p></td>
<td><p>并行从多个主机上复制文件</p></td>
</tr>
<tr class="row-even"><td><p>prsync</p></td>
<td><p>并行从多个主机使用rsync同步文件</p></td>
</tr>
<tr class="row-odd"><td><p>pnuke</p></td>
<td><p>并行在多个主机上杀死进程</p></td>
</tr>
<tr class="row-even"><td><p>pslurp</p></td>
<td><p>并行在多个主机上复制文件到一个中心主机上</p></td>
</tr>
</tbody>
</table>
</section>
<section id="id4">
<h2>使用pssh指令</h2>
<ul>
<li><p>首先创建一个hosts文件，名字可以按需设置，例如，我要访问ceph集群，则创建 <code class="docutils literal notranslate"><span class="pre">ceph-hosts</span></code> 配置文件，内容如下:</p>
<div class="highlight-default notranslate"><div class="highlight"><pre><span></span><span class="mf">172.18</span><span class="o">.</span><span class="mf">0.11</span>
<span class="mf">172.18</span><span class="o">.</span><span class="mf">0.12</span>
<span class="mf">172.18</span><span class="o">.</span><span class="mf">0.13</span>
<span class="mf">172.18</span><span class="o">.</span><span class="mf">0.14</span>
<span class="mf">172.18</span><span class="o">.</span><span class="mf">0.15</span>
</pre></div>
</div>
</li>
</ul>
<p>如果SSH端口不同，可以在主机ip后面加上端口号，例如 <code class="docutils literal notranslate"><span class="pre">172.18.0.11:2222</span></code> 表示该主机的SSH访问端口是 <code class="docutils literal notranslate"><span class="pre">2222</span></code></p>
<ul class="simple">
<li><p>常用参数</p></li>
</ul>
<table class="colwidths-given docutils align-default" id="id10">
<caption><span class="caption-text">pssh命令参数</span></caption>
<colgroup>
<col style="width: 33%" />
<col style="width: 67%" />
</colgroup>
<thead>
<tr class="row-odd"><th class="head"><p>参数</p></th>
<th class="head"><p>说明</p></th>
</tr>
</thead>
<tbody>
<tr class="row-even"><td><p><code class="docutils literal notranslate"><span class="pre">-h</span></code></p></td>
<td><p>主机名列表文件</p></td>
</tr>
<tr class="row-odd"><td><p><code class="docutils literal notranslate"><span class="pre">-l</span></code></p></td>
<td><p>登陆用户名，例如 <code class="docutils literal notranslate"><span class="pre">-l</span> <span class="pre">root</span></code></p></td>
</tr>
<tr class="row-even"><td><p><code class="docutils literal notranslate"><span class="pre">-A</span></code></p></td>
<td><p>提供统一的登陆密码</p></td>
</tr>
<tr class="row-odd"><td><p><code class="docutils literal notranslate"><span class="pre">-i</span></code></p></td>
<td><p>交互模式，远程服务器的命令执行结果会输出</p></td>
</tr>
</tbody>
</table>
<p>举例:</p>
<div class="highlight-default notranslate"><div class="highlight"><pre><span></span><span class="n">pssh</span> <span class="o">-</span><span class="n">ih</span> <span class="n">ceph</span><span class="o">-</span><span class="n">hosts</span> <span class="o">-</span><span class="n">l</span> <span class="n">root</span> <span class="o">-</span><span class="n">A</span> <span class="s2">&quot;uptime&quot;</span>
</pre></div>
</div>
</section>
<section id="psshtips">
<h2>pssh使用的tips</h2>
<section id="id5">
<h3>忽略服务器密钥</h3>
<p>在批量处理主机时，如果需要每个服务器都确认服务器密钥是不现实的，这里就需要使用ssh的一个参数 <code class="docutils literal notranslate"><span class="pre">-O</span> <span class="pre">StrictHostKeyChecking=no</span></code> ，这个参数也可以传递给pssh:</p>
<div class="highlight-default notranslate"><div class="highlight"><pre><span></span><span class="n">pssh</span> <span class="o">-</span><span class="n">O</span> <span class="n">StrictHostKeyChecking</span><span class="o">=</span><span class="n">no</span> <span class="o">-</span><span class="n">ih</span> <span class="n">hosts_ip</span> <span class="o">-</span><span class="n">l</span> <span class="n">huatai</span> <span class="o">-</span><span class="n">A</span> <span class="s2">&quot;uptime&quot;</span>
</pre></div>
</div>
</section>
<section id="id6">
<h3>忽略错误密码</h3>
<p>对于部分主机密码错误，我们希望直接跳过错误密码的节点，可以使用ssh的批处理模式 <code class="docutils literal notranslate"><span class="pre">BatchMode=yes</span></code> ，可以配置在用户的 <code class="docutils literal notranslate"><span class="pre">~/.ssh/config</span></code> 中，这样执行pssh命令可以直接忽略错误密码的节点。</p>
</section>
<section id="tty">
<h3>终端tty</h3>
<p>在pssh执行 <code class="docutils literal notranslate"><span class="pre">sudo</span></code> 命令时候，会出现报错:</p>
<div class="highlight-default notranslate"><div class="highlight"><pre><span></span><span class="o">...</span>
<span class="p">[</span><span class="mi">14</span><span class="p">]</span> <span class="mi">14</span><span class="p">:</span><span class="mi">45</span><span class="p">:</span><span class="mi">00</span> <span class="p">[</span><span class="n">FAILURE</span><span class="p">]</span> <span class="mf">192.168</span><span class="o">.</span><span class="mf">1.11</span> <span class="n">Exited</span> <span class="k">with</span> <span class="n">error</span> <span class="n">code</span> <span class="mi">1</span>
<span class="n">Stderr</span><span class="p">:</span> <span class="n">sudo</span><span class="p">:</span> <span class="n">no</span> <span class="n">tty</span> <span class="n">present</span> <span class="ow">and</span> <span class="n">no</span> <span class="n">askpass</span> <span class="n">program</span> <span class="n">specified</span>
<span class="o">...</span>
</pre></div>
</div>
<p>这个报错在ssh远程执行sudo命令时候也会遇到，原因是远程执行强制的基于screen的程序时，需要使用 <code class="docutils literal notranslate"><span class="pre">-t</span></code> 参数来分配一个tty，即使ssh没有本地tty。不过，我没有找到如何把这个参数传递给pssh的方法，所以遇到这个问题，我暂时使用循环方式使用ssh命令。举例:</p>
<div class="highlight-default notranslate"><div class="highlight"><pre><span></span>for i in `cat host`;do ssh -t huatai@$i &quot;echo PASSWORD | sudo -S cp /tmp/my_script.sh /usr/local/bin/my_script.sh&quot;;done
</pre></div>
</div>
<div class="admonition note">
<p class="admonition-title">注解</p>
<p>这里远程服务器sudo需要输入密码，采用了通过管道向sudo传输密码的方法，此时 sudo 需要使用参数 <code class="docutils literal notranslate"><span class="pre">-S</span></code> 从 <code class="docutils literal notranslate"><span class="pre">stdin</span></code> 获取密码。</p>
</div>
</section>
<section id="ssh">
<h3>使用ssh密钥登陆</h3>
<p>对于使用SSH密钥的登陆方式，需要使用参数 <code class="docutils literal notranslate"><span class="pre">-x</span></code> 来使用扩展ssh参数指定密钥登陆，举例:</p>
<div class="highlight-default notranslate"><div class="highlight"><pre><span></span><span class="n">pssh</span> <span class="o">-</span><span class="n">i</span> <span class="o">-</span><span class="n">h</span> <span class="n">list_of_hosts</span> \
<span class="o">-</span><span class="n">x</span> <span class="s2">&quot;-oStrictHostKeyChecking=no  -i /home/xxx/.ssh/ec2.pem&quot;</span> <span class="s1">&#39;uptime&#39;</span>
</pre></div>
</div>
<p>也可以在 <code class="docutils literal notranslate"><span class="pre">~/.ssh/config</span></code> 指定扩展参数，例如:</p>
<div class="highlight-default notranslate"><div class="highlight"><pre><span></span><span class="n">Host</span> <span class="o">*.</span><span class="n">eu</span><span class="o">-</span><span class="n">west</span><span class="o">-</span><span class="mf">1.</span><span class="n">compute</span><span class="o">.</span><span class="n">amazonaws</span><span class="o">.</span><span class="n">com</span>
    <span class="n">StrictHostKeyChecking</span> <span class="n">no</span>
    <span class="n">IdentityFile</span> <span class="o">~/.</span><span class="n">ssh</span><span class="o">/</span><span class="n">ec2</span><span class="o">.</span><span class="n">pem</span>
</pre></div>
</div>
</section>
<section id="id7">
<h3>密码保护的密钥</h3>
<div class="admonition note">
<p class="admonition-title">注解</p>
<p>最好的方法还是采用 keychain 来解决密钥认证，实际上就不需要使用 <code class="docutils literal notranslate"><span class="pre">-x</span></code> 参数来扩展。</p>
</div>
<p>对于密码保护的密钥，建议使用 keychain 来解决密码输入:</p>
<div class="highlight-default notranslate"><div class="highlight"><pre><span></span>sudo apt-get install keychain
keychain ~/.ssh/id_rsa
. ~/.keychain/$(uname -n)-sh
</pre></div>
</div>
<p>然后执行 pssh 指令就不再需要输入密钥保护密码了。</p>
<p>建议在 <code class="docutils literal notranslate"><span class="pre">~/.bashrc</span></code> 中添加以下内容，则每次终端登陆就只要输入一次密钥保护密码就可以:</p>
<div class="highlight-default notranslate"><div class="highlight"><pre><span></span>keychain --clear $HOME/.ssh/id_rsa
. $HOME/.keychain/$(uname -n)-sh
</pre></div>
</div>
</section>
</section>
<section id="id8">
<h2>参考</h2>
<ul class="simple">
<li><p><a class="reference external" href="https://www.tecmint.com/execute-commands-on-multiple-linux-servers-using-pssh/">Pssh – Execute Commands on Multiple Remote Linux Servers Using Single Terminal</a><span class="link-target"> [https://www.tecmint.com/execute-commands-on-multiple-linux-servers-using-pssh/]</span></p></li>
<li><p><a class="reference external" href="http://manpages.ubuntu.com/manpages/precise/man1/parallel-ssh.1.html">parallel-ssh</a><span class="link-target"> [http://manpages.ubuntu.com/manpages/precise/man1/parallel-ssh.1.html]</span></p></li>
<li><p><a class="reference external" href="https://gist.github.com/carlessanagustin/c5e70c8edfa8408547545e26b61ab783">pssh-howto.md</a><span class="link-target"> [https://gist.github.com/carlessanagustin/c5e70c8edfa8408547545e26b61ab783]</span></p></li>
<li><p><a class="reference external" href="https://unix.stackexchange.com/questions/128974/parallel-ssh-with-passphrase-protected-ssh-key">parallel-ssh with Passphrase Protected SSH Key</a><span class="link-target"> [https://unix.stackexchange.com/questions/128974/parallel-ssh-with-passphrase-protected-ssh-key]</span></p></li>
</ul>
</section>
</section>


            <div class="clearer"></div>
          </div>
      </div>
      <div class="clearer"></div>
    </div>
  </body>
</html>