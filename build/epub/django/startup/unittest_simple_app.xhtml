<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" /><meta name="generator" content="Docutils 0.17.1: http://docutils.sourceforge.net/" />

    <title>功能测试驱动开发简单应用</title>
    <link rel="stylesheet" href="../../_static/pygments.css" type="text/css" />
    <link rel="stylesheet" href="../../_static/epub.css" type="text/css" />
    <link rel="stylesheet" href="../../_static/theme_overrides.css" type="text/css" /> 
  </head><body>

    <div class="document">
      <div class="documentwrapper">
          <div class="body" role="main">
            
  <section id="unittest-simple-app">
<span id="id1"></span><h1>功能测试驱动开发简单应用</h1>
<p>功能测试的作用是跟踪用户行为，模拟用户使用某个功能的过程，以及应用应该如何响应用户的操作。</p>
<div class="admonition note">
<p class="admonition-title">注解</p>
<p>术语：功能测试(Function Test) = 验收测试(Acceptance Test) = 端到端测试(End-to-End Test)</p>
</div>
<div class="admonition note">
<p class="admonition-title">注解</p>
<p>在 <a class="reference internal" href="../../devops/jenkins/index.xhtml#jenkins"><span class="std std-ref">Jenkins</span></a> 完成软件的编译之后，我们会进行一种称为BVT(Build Verification Test)测试，就是在新的build之上跑一系列case来验证这个build功能是否符合预期。这个测试也就是上述的功能测试(Function Test)，验收测试(Acceptance Test)，端到端测试(End-to-End Test)。</p>
</div>
<p>功能测试需要一个易读易理解的说明文档。为了叙述清晰，可以把测试代码和代码注释结合起来使用。编写新功能测试时，可以先写注释，以便清晰描述功能，甚至可以作为讨论应用需求和功能的方式分享给非程序员看。</p>
<div class="admonition note">
<p class="admonition-title">注解</p>
<p>Python结合 <a class="reference internal" href="../../devops/docs/sphinx_doc/index.xhtml#sphinx-doc"><span class="std std-ref">Sphinx文档</span></a> 可以实现完善的文档注释说明。</p>
</div>
<p>TDD常和敏捷软件开发方法结合在一起使用。有一个”最简可用应用”的概念，即开发出最简单但是可以使用的应用。</p>
<section id="python">
<h2>Python注释</h2>
<p>在Python(以及其他语言)中，要努力做到让代码可读，使用具有意义的变量名和函数名，保持代码结构清晰，这样就不需要通过注释说明代码做什么。简单重复代码意图的注释不仅无意义，而且容易随着代码迭代而失效并造成混淆。</p>
</section>
<section id="pythonunittest">
<h2>Python标准库unittest模块</h2>
<p>之前我们编写通过简单的 <code class="docutils literal notranslate"><span class="pre">fnctional_test.py</span></code> 来检测Django的title:</p>
<div class="highlight-default notranslate"><div class="highlight"><pre><span></span><span class="kn">from</span> <span class="nn">selenium</span> <span class="kn">import</span> <span class="n">webdriver</span>
<span class="n">browser</span> <span class="o">=</span> <span class="n">webdriver</span><span class="o">.</span><span class="n">Firefox</span><span class="p">()</span>
<span class="n">browser</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;http://localhost:8000&#39;</span><span class="p">)</span>
<span class="k">assert</span> <span class="s1">&#39;Django&#39;</span> <span class="ow">in</span> <span class="n">browser</span><span class="o">.</span><span class="n">title</span>
</pre></div>
</div>
<p>这里的 <code class="docutils literal notranslate"><span class="pre">assert</span></code> (断言) 是功能测试常用的方法。但是自己编写功能测试很难完善输出的debug信息。通常我们会使用Python的标准库 <code class="docutils literal notranslate"><span class="pre">unittest</span></code> 模块的解决方案:</p>
<div class="highlight-default notranslate"><div class="highlight"><pre><span></span><span class="kn">from</span> <span class="nn">selenium</span> <span class="kn">import</span> <span class="n">webdriver</span>
<span class="kn">import</span> <span class="nn">unittest</span>

<span class="k">class</span> <span class="nc">NewVisitorTest</span><span class="p">(</span><span class="n">unittest</span><span class="o">.</span><span class="n">TestCase</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">setUp</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">browser</span> <span class="o">=</span> <span class="n">webdriver</span><span class="o">.</span><span class="n">Firefox</span><span class="p">()</span>

    <span class="k">def</span> <span class="nf">testDown</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">browser</span><span class="o">.</span><span class="n">quit</span><span class="p">()</span>

    <span class="k">def</span> <span class="nf">test_can_start_a_list_and_retrieve_it_later</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">browser</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;http://localhost:8001&#39;</span><span class="p">)</span>

        <span class="bp">self</span><span class="o">.</span><span class="n">assertIn</span><span class="p">(</span><span class="s1">&#39;To-Do&#39;</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">browser</span><span class="o">.</span><span class="n">title</span><span class="p">)</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">fail</span><span class="p">(</span><span class="s1">&#39;Finish the test!&#39;</span><span class="p">)</span>

<span class="k">if</span> <span class="vm">__name__</span> <span class="o">==</span> <span class="s1">&#39;__main__&#39;</span><span class="p">:</span>
    <span class="n">unittest</span><span class="o">.</span><span class="n">main</span><span class="p">(</span><span class="n">warnings</span><span class="o">=</span><span class="s1">&#39;ignore&#39;</span><span class="p">)</span>
</pre></div>
</div>
<ul class="simple">
<li><p>测试的类继承自 <code class="docutils literal notranslate"><span class="pre">unittest.TestCase</span></code></p></li>
<li><p>测试代码写在名为 <code class="docutils literal notranslate"><span class="pre">test_can_start_a_list_and_retrieve_it_later</span></code> 的方法中。名为 <code class="docutils literal notranslate"><span class="pre">test_</span></code> 开头的方法都是测试方法，由测试运行程序运行。</p></li>
<li><p><code class="docutils literal notranslate"><span class="pre">setUp</span></code> 和 <code class="docutils literal notranslate"><span class="pre">tearDown</span></code> 是特殊的方法，分别在测试方法之前和之后运行，这里用两个方法打开和关闭浏览器。</p></li>
<li><p><code class="docutils literal notranslate"><span class="pre">self.assertIn</span></code> 是测试断言。 <code class="docutils literal notranslate"><span class="pre">unittest</span></code> 提供了很多用于编写测试断言的辅助函数，如 <code class="docutils literal notranslate"><span class="pre">assertEqual</span></code> <code class="docutils literal notranslate"><span class="pre">assertTrue</span></code> <code class="docutils literal notranslate"><span class="pre">assertFalse</span></code> 等。</p></li>
<li><p><code class="docutils literal notranslate"><span class="pre">if</span> <span class="pre">__name__</span> <span class="pre">==</span> <span class="pre">'__main__'</span></code> 分句表示Python脚本检查自己是否在命令行运行，而不是在其他脚本中导入。</p></li>
</ul>
<p>通过运行 <code class="docutils literal notranslate"><span class="pre">unittest</span></code> 的功能测试，可以显示排版精美的报告，以及有利调试的错误信息:</p>
<div class="highlight-default notranslate"><div class="highlight"><pre><span></span><span class="o">.</span><span class="n">F</span>
<span class="o">======================================================================</span>
<span class="n">FAIL</span><span class="p">:</span> <span class="n">test_can_start_a_list_and_retrieve_it_later</span> <span class="p">(</span><span class="n">__main__</span><span class="o">.</span><span class="n">NewVisitorTest</span><span class="p">)</span>
<span class="o">----------------------------------------------------------------------</span>
<span class="n">Traceback</span> <span class="p">(</span><span class="n">most</span> <span class="n">recent</span> <span class="n">call</span> <span class="n">last</span><span class="p">):</span>
  <span class="n">File</span> <span class="s2">&quot;functional_tests.py&quot;</span><span class="p">,</span> <span class="n">line</span> <span class="mi">14</span><span class="p">,</span> <span class="ow">in</span> <span class="n">test_can_start_a_list_and_retrieve_it_later</span>
    <span class="bp">self</span><span class="o">.</span><span class="n">assertIn</span><span class="p">(</span><span class="s1">&#39;To-Do&#39;</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">browser</span><span class="o">.</span><span class="n">title</span><span class="p">)</span>
<span class="ne">AssertionError</span><span class="p">:</span> <span class="s1">&#39;To-Do&#39;</span> <span class="ow">not</span> <span class="n">found</span> <span class="ow">in</span> <span class="s1">&#39;Django: the Web framework for perfectionists with deadlines.&#39;</span>

<span class="o">----------------------------------------------------------------------</span>
<span class="n">Ran</span> <span class="mi">2</span> <span class="n">tests</span> <span class="ow">in</span> <span class="mf">10.321</span><span class="n">s</span>

<span class="n">FAILED</span> <span class="p">(</span><span class="n">failures</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
</pre></div>
</div>
</section>
</section>


            <div class="clearer"></div>
          </div>
      </div>
      <div class="clearer"></div>
    </div>
  </body>
</html>