<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" /><meta name="generator" content="Docutils 0.17.1: http://docutils.sourceforge.net/" />

    <title>模拟云计算的Studio</title>
    <link rel="stylesheet" href="../_static/pygments.css" type="text/css" />
    <link rel="stylesheet" href="../_static/epub.css" type="text/css" />
    <link rel="stylesheet" href="../_static/theme_overrides.css" type="text/css" /> 
  </head><body>

    <div class="document">
      <div class="documentwrapper">
          <div class="body" role="main">
            
  <section id="studio">
<span id="introduce-my-studio"></span><h1>模拟云计算的Studio</h1>
<section id="id1">
<h2>最初的构想</h2>
<p>很多时候，我们在线上实现一个部署架构，是需要在线下环境反复推演，进行架构对比的。不过，作为个人爱好，显然无法像公司那样购买大批的物理服务器，来构建一个测试环境。</p>
<p>我最初的想法是用两个旧笔记本电脑，结合我的一些树莓派设备来构建一个OpenStack的云计算环境。不过，我也发现，实际上还是比较累赘，不仅旧笔记本的性能欠佳，而且这么多设备堆在一起，性能依然不如一台现代主流的服务器，也非常占用空间。</p>
</section>
<section id="id2">
<h2>现在的构想</h2>
<p>我有一台2013年底自己购买的旧MacBook Pro，现在(2018年)已经退役，虽然这是5年前的笔记本，但是MacBook Pro做工和用料都很扎实，加上macOS充分发挥了硬件性能的操作系统，即使放到现在，这台当年的高配版本( <a class="reference external" href="https://everymac.com/systems/apple/macbook_pro/specs/macbook-pro-core-i7-2.3-15-dual-graphics-late-2013-retina-display-specs.html">Apple MacBook Pro “Core i7” 2.3 15” Late 2013</a><span class="link-target"> [https://everymac.com/systems/apple/macbook_pro/specs/macbook-pro-core-i7-2.3-15-dual-graphics-late-2013-retina-display-specs.html]</span> ) 依然能够满足日常工作学习需要。</p>
<p>由于这台旧MacBook Pro处理器 <a class="reference external" href="https://ark.intel.com/content/www/us/en/ark/products/76086/intel-core-i7-4850hq-processor-6m-cache-up-to-3-50-ghz.html">Intel® Core™ i7-4850HQ Processor</a><span class="link-target"> [https://ark.intel.com/content/www/us/en/ark/products/76086/intel-core-i7-4850hq-processor-6m-cache-up-to-3-50-ghz.html]</span> ，支持非常完善的虚拟化高级特性，特别是通过硬件加速nested virtualization，也就是可以在一台主机上实现嵌套虚拟化。实际上，完全可以在一台硬件足够强大的笔记本上实现多个KVM Host，部署一个小型的OpenStack集群。同时在OpenStack的计算节点上，运行Docker+Kubernetes，这样可以完整模拟出一个小型的IaaS集群。</p>
<p>既然这台旧笔记本电脑性能足够强大且可以通过虚拟化模拟出大量的物理服务器，我们完全可以用一台主机来模拟数据中心，来实践以前需要大量服务器才能完成的测试工作。这套 <a class="reference internal" href="../index.xhtml#cloud-atlas"><span class="std std-ref">云图 – 云计算图志</span></a> 将专注于数据中心技术，包括但不限于:</p>
<ul class="simple">
<li><p><a class="reference internal" href="../devops/index.xhtml#devops"><span class="std std-ref">DevOps Atlas</span></a> – 持续集成、持续测试和持续部署的技术探索，构建完整的软件生命周期管理</p></li>
<li><p><a class="reference internal" href="../kvm/index.xhtml#kvm"><span class="std std-ref">KVM Atlas</span></a> – 探索KVM虚拟化技术，实现OpenStack云计算平台的底层技术架构</p></li>
<li><p><a class="reference internal" href="../ceph/index.xhtml#ceph"><span class="std std-ref">Ceph Atlas</span></a> – 构建OpenStack以及Kubernetes云计算的分布式存储</p></li>
<li><p><a class="reference internal" href="../openstack/index.xhtml#openstack"><span class="std std-ref">OpenStack Atlas</span></a> – 实现基于KVM虚拟化的IaaS平台</p></li>
<li><p><a class="reference internal" href="../docker/index.xhtml#docker"><span class="std std-ref">Docker Atlas</span></a> – 探索容器技术，作为Kubernetes的基础技术</p></li>
<li><p><a class="reference internal" href="../kubernetes/index.xhtml#kubernetes"><span class="std std-ref">Kubernetes Atlas</span></a> – 容器的生命周期管理</p></li>
<li><p><a class="reference internal" href="../mysql/index.xhtml#mysql"><span class="std std-ref">MySQL Atlas</span></a> – 作为云计算重要的基础组件，提供OpenStack的底层支持</p></li>
<li><p><a class="reference internal" href="../big_data/index.xhtml#big-data"><span class="std std-ref">Big Data Atlas</span></a> – 大数据分析是支持云计算管理的关键技术</p></li>
<li><p><a class="reference internal" href="../machine_learning/index.xhtml#machine-learning"><span class="std std-ref">Machine Learning Atlas</span></a> – 在大数据基础上引入机器学习能够帮助我们分析和预测</p></li>
<li><p><a class="reference internal" href="../linux/kali_linux/index.xhtml#kali-linux"><span class="std std-ref">Kali Linux</span></a> – 通过安全攻防来了解计算机安全技术</p></li>
<li><p><a class="reference internal" href="../kernel/index.xhtml#kernel"><span class="std std-ref">Kernel Atlas</span></a> – 内核是所有技术的基础，性能、稳定性、安全等等都需要内核支持</p></li>
</ul>
<div class="admonition note">
<p class="admonition-title">注解</p>
<p>其实在公司的开发测试环境也是类似，如果没有特别的性能要求，可以采用本书提供的解决方案，采用少量的物理服务器来模拟大规模集群，测试软件产品以及验证部署架构。</p>
</div>
</section>
<section id="id3">
<h2>一点一滴</h2>
<p>我准备实践一个模拟云计算的开发测试集群，就用一台MacBook Pro笔记本。主要的思路是通过 <a class="reference internal" href="../kvm/kvm_nested_virtual.xhtml#kvm-nested-virtual"><span class="std std-ref">KVM嵌套虚拟化</span></a> 来模拟多个物理主机，这样就可以搭建集群化的OpenStack云计算环境( <a class="reference internal" href="../openstack/index.xhtml#openstack"><span class="std std-ref">OpenStack Atlas</span></a> )；由于OpenStack采用了KVM虚拟化，能够运行大量的KVM虚拟机，进而可以在KVM虚拟机内部构建基于Kubernetes技术 ( <a class="reference internal" href="../kubernetes/index.xhtml#kubernetes"><span class="std std-ref">Kubernetes Atlas</span></a> )的容器集群，甚至进一步实现基于GPU的机器学习环境 ( <a class="reference internal" href="../machine_learning/index.xhtml#machine-learning"><span class="std std-ref">Machine Learning Atlas</span></a> )。</p>
<p>详细的各个技术实践细节，我将分不同的分册来撰写。</p>
<div class="admonition note">
<p class="admonition-title">注解</p>
<p><strong>只使用</strong> <code class="docutils literal notranslate"><span class="pre">一台</span></code> MacBook Pro Late 2013笔记本，来构建一个云计算开发测试环境。</p>
</div>
</section>
<section id="id4">
<h2>补充设备</h2>
<p>除了上述 MacBook Pro 设备能够完整模拟组建一个云计算集群外，我还有一台更为古老的 <a class="reference external" href="https://www.cnet.com/products/lenovo-thinkpad-x220-4287-12-5-core-i5-2410m-windows-7-pro-64-bit-4-gb-ram-320-gb-hdd-series/">ThinkPad X220 笔记本</a><span class="link-target"> [https://www.cnet.com/products/lenovo-thinkpad-x220-4287-12-5-core-i5-2410m-windows-7-pro-64-bit-4-gb-ram-320-gb-hdd-series/]</span> ，处理器是 <a class="reference internal" href="hardware/intel_core_i5_2410m.xhtml#intel-core-i5-2410m"><span class="std std-ref">Intel Core i5-2410M处理器</span></a> ，虽然性能较差，但是更换过SSD磁盘之后，感觉还有一战之力，所以就作为模拟云计算平台的补充设备。</p>
</section>
</section>


            <div class="clearer"></div>
          </div>
      </div>
      <div class="clearer"></div>
    </div>
  </body>
</html>