<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" /><meta name="generator" content="Docutils 0.17.1: http://docutils.sourceforge.net/" />

    <title>远程访问dockerd服务</title>
    <link rel="stylesheet" href="../../_static/pygments.css" type="text/css" />
    <link rel="stylesheet" href="../../_static/epub.css" type="text/css" />
    <link rel="stylesheet" href="../../_static/theme_overrides.css" type="text/css" /> 
  </head><body>

    <div class="document">
      <div class="documentwrapper">
          <div class="body" role="main">
            
  <section id="dockerd">
<span id="remote-access-dockerd"></span><h1>远程访问dockerd服务</h1>
<p>虽然默认情况下都是在host主机上访问Docker daemon，不过，远程访问Docker daemon也很有必要，特别是在DevOps工作流中，往往需要远程调试Docker。</p>
<div class="admonition warning">
<p class="admonition-title">警告</p>
<p>虽然远程访问Docker daemon是非常强大的技术，但是需要考虑安全性。Docker socket可能被滥用并导致攻击。</p>
</div>
<img alt="../../_images/docker_daemon_remote_access.png" src="../../_images/docker_daemon_remote_access.png" style="width: 521.0px; height: 402.0px;" />
<section id="dockertcp">
<h2>docker的TCP访问</h2>
<p>默认Docker配置限制只能通过 <code class="docutils literal notranslate"><span class="pre">/var/run/docker.sock</span></code> 在本地host上访问Docker daemon，这样非host主机上的进程就不能访问Docker服务，这提供了一定的安全保障。</p>
<p>通过Docker配置修改，可以将Docker daemon的访问通过TCP网络输出给外部访问，这样不仅远程Docker client可以管理Docker，并且可以集成到Jenkins这样的持续集成系统，实现软件开发部署的持续交付流程。</p>
<ul>
<li><p>修改配置之前，首先停止Docker daemon:</p>
<div class="highlight-default notranslate"><div class="highlight"><pre><span></span><span class="n">sudo</span> <span class="n">systemctl</span> <span class="n">stop</span> <span class="n">docker</span>
</pre></div>
</div>
</li>
<li><p>开启Docker daemon的TCP访问</p></li>
</ul>
<p>可以通过手工命令运行Docker daemon提供对外的TCP访问:</p>
<div class="highlight-default notranslate"><div class="highlight"><pre><span></span><span class="n">sudo</span> <span class="n">docker</span> <span class="n">daemon</span> <span class="o">-</span><span class="n">H</span> <span class="n">tcp</span><span class="p">:</span><span class="o">//</span><span class="mf">0.0</span><span class="o">.</span><span class="mf">0.0</span><span class="p">:</span><span class="mi">2375</span>
</pre></div>
</div>
<p>或者通过环境变量 <code class="docutils literal notranslate"><span class="pre">DOCKER_HOST</span></code> 来使得docker运行时启用TCP:</p>
<div class="highlight-default notranslate"><div class="highlight"><pre><span></span><span class="n">export</span> <span class="n">DOCKER_HOST</span><span class="o">=</span><span class="n">tcp</span><span class="p">:</span><span class="o">//&lt;</span><span class="n">your</span> <span class="n">host</span><span class="s1">&#39;s ip&gt;:2375</span>
<span class="n">docker</span> <span class="o">&lt;</span><span class="n">subcommand</span><span class="o">&gt;</span>
</pre></div>
</div>
</section>
<section id="ubuntu">
<h2>Ubuntu早期版本</h2>
<p>Ubuntu 上默认启动的docker服务显示的运行参数是 <code class="docutils literal notranslate"><span class="pre">/usr/bin/dockerd</span> <span class="pre">-H</span> <span class="pre">fd://</span></code> 。参考 <a class="reference external" href="https://medium.com/&#64;sudarakayasindu/enabling-and-accessing-docker-engine-api-on-a-remote-docker-host-on-ubuntu-16-04-2c15f55f5d39">Enabling and accessing Docker Engine API on a remote docker host on Ubuntu</a><span class="link-target"> [https://medium.com/&#64;sudarakayasindu/enabling-and-accessing-docker-engine-api-on-a-remote-docker-host-on-ubuntu-16-04-2c15f55f5d39]</span></p>
<p>早期Ubuntu版本采用修改 <code class="docutils literal notranslate"><span class="pre">/etc/defualt/docker</span></code> 配置文件，添加:</p>
<div class="highlight-default notranslate"><div class="highlight"><pre><span></span><span class="n">DOCKER_OPTS</span><span class="o">=</span><span class="s2">&quot;-H tcp://0.0.0.0:2375 -H unix:///var/run/docker.sock&quot;</span>
</pre></div>
</div>
</section>
<section id="systemdubuntu">
<h2>使用systemd的现代Ubuntu版本</h2>
<p>在当前采用systemd的系统中，激活remote API的方法参考 <a class="reference external" href="https://success.docker.com/article/how-do-i-enable-the-remote-api-for-dockerd">How do I enable the remote API for dockerd</a><span class="link-target"> [https://success.docker.com/article/how-do-i-enable-the-remote-api-for-dockerd]</span>  ，创建一个 <code class="docutils literal notranslate"><span class="pre">/etc/systemd/system/docker.service.d/startup_options.conf</span></code></p>
<div class="highlight-default notranslate"><div class="highlight"><pre><span></span><span class="c1"># /etc/systemd/system/docker.service.d/override.conf</span>
<span class="p">[</span><span class="n">Service</span><span class="p">]</span>
<span class="n">ExecStart</span><span class="o">=</span>
<span class="n">ExecStart</span><span class="o">=/</span><span class="n">usr</span><span class="o">/</span><span class="nb">bin</span><span class="o">/</span><span class="n">dockerd</span> <span class="o">-</span><span class="n">H</span> <span class="n">fd</span><span class="p">:</span><span class="o">//</span> <span class="o">-</span><span class="n">H</span> <span class="n">tcp</span><span class="p">:</span><span class="o">//</span><span class="mf">0.0</span><span class="o">.</span><span class="mf">0.0</span><span class="p">:</span><span class="mi">2375</span>
</pre></div>
</div>
<div class="admonition note">
<p class="admonition-title">注解</p>
<p><code class="docutils literal notranslate"><span class="pre">-H</span></code> 参数可以指定dockerd的监听socket，可以是Unix socket或者TCP端口。可以指定多个 <code class="docutils literal notranslate"><span class="pre">-H</span></code> 参数来绑定多个 sockets/ports。默认的 <code class="docutils literal notranslate"><span class="pre">-H</span> <span class="pre">fd://</span></code> 使用的是systemd的socket激活功能，引用的是 <code class="docutils literal notranslate"><span class="pre">/lib/systemd/system/docker.service</span></code> 。</p>
<p>从上述配置 <code class="docutils literal notranslate"><span class="pre">startup_options.conf</span></code> 来看，是先将 <code class="docutils literal notranslate"><span class="pre">ExecStart</span></code> 配置清空然后再重新加入完整新配置。</p>
</div>
<p>然后重新加载unit文件:</p>
<div class="highlight-default notranslate"><div class="highlight"><pre><span></span><span class="n">sudo</span> <span class="n">systemctl</span> <span class="n">daemon</span><span class="o">-</span><span class="n">reload</span>
</pre></div>
</div>
<p>使用新的参数重启:</p>
<div class="highlight-default notranslate"><div class="highlight"><pre><span></span><span class="n">sudo</span> <span class="n">systemctl</span> <span class="n">restart</span> <span class="n">docker</span><span class="o">.</span><span class="n">service</span>
</pre></div>
</div>
<div class="admonition note">
<p class="admonition-title">注解</p>
<p>如果没有使用上述这种override方式，也可以直接修改 <code class="docutils literal notranslate"><span class="pre">/lib/systemd/system/docker.service</span></code> 配置文件，同样可以添加监听参数。但是这种直接修改系统配置文件的方法会对后续升级影响。</p>
<p><code class="docutils literal notranslate"><span class="pre">/lib/systemd/system/docker.service</span></code> 配置中如果有 <code class="docutils literal notranslate"><span class="pre">EnvironmentFile=</span></code> 配置项，则指定环境参数文件，就可以通过环境参数文件内容来添加参数。</p>
</div>
<ul>
<li><p>检查docker重启后日志:</p>
<div class="highlight-default notranslate"><div class="highlight"><pre><span></span><span class="n">journalctl</span> <span class="o">-</span><span class="n">u</span> <span class="n">docker</span>
<span class="n">journalctl</span> <span class="o">-</span><span class="n">u</span> <span class="n">docker</span> <span class="o">-</span><span class="n">f</span>
</pre></div>
</div>
</li>
</ul>
<p>可以看到日志显示TCP端口监听:</p>
<div class="highlight-default notranslate"><div class="highlight"><pre><span></span><span class="n">Feb</span> <span class="mi">20</span> <span class="mi">08</span><span class="p">:</span><span class="mi">32</span><span class="p">:</span><span class="mi">01</span> <span class="n">kube</span> <span class="n">systemd</span><span class="p">[</span><span class="mi">1</span><span class="p">]:</span> <span class="n">Started</span> <span class="n">Docker</span> <span class="n">Application</span> <span class="n">Container</span> <span class="n">Engine</span><span class="o">.</span>
<span class="n">Feb</span> <span class="mi">20</span> <span class="mi">08</span><span class="p">:</span><span class="mi">32</span><span class="p">:</span><span class="mi">01</span> <span class="n">kube</span> <span class="n">dockerd</span><span class="p">[</span><span class="mi">2010</span><span class="p">]:</span> <span class="n">time</span><span class="o">=</span><span class="s2">&quot;2019-02-20T08:32:01.987747054+08:00&quot;</span> <span class="n">level</span><span class="o">=</span><span class="n">info</span> <span class="n">msg</span><span class="o">=</span><span class="s2">&quot;API listen on [::]:2375&quot;</span>
<span class="n">Feb</span> <span class="mi">20</span> <span class="mi">08</span><span class="p">:</span><span class="mi">32</span><span class="p">:</span><span class="mi">01</span> <span class="n">kube</span> <span class="n">dockerd</span><span class="p">[</span><span class="mi">2010</span><span class="p">]:</span> <span class="n">time</span><span class="o">=</span><span class="s2">&quot;2019-02-20T08:32:01.988023375+08:00&quot;</span> <span class="n">level</span><span class="o">=</span><span class="n">info</span> <span class="n">msg</span><span class="o">=</span><span class="s2">&quot;API listen on /var/run/docker.sock&quot;</span>
</pre></div>
</div>
</section>
<section id="docker">
<h2>docker客户端远程连接测试</h2>
<p>现在可以在远程主机上使用如下命令语法来测试:</p>
<div class="highlight-default notranslate"><div class="highlight"><pre><span></span><span class="n">docker</span> <span class="o">-</span><span class="n">H</span> <span class="n">tcp</span><span class="p">:</span><span class="o">//&lt;</span><span class="n">your</span> <span class="n">host</span><span class="s1">&#39;s ip&gt;:2375 &lt;subcommand&gt;</span>
</pre></div>
</div>
<p>举例，显示远程服务器上的镜像列表:</p>
<div class="highlight-default notranslate"><div class="highlight"><pre><span></span><span class="n">docker</span> <span class="o">-</span><span class="n">H</span> <span class="n">tcp</span><span class="p">:</span><span class="o">//</span><span class="mf">192.168</span><span class="o">.</span><span class="mf">64.3</span><span class="p">:</span><span class="mi">2375</span> <span class="n">images</span>
</pre></div>
</div>
<p>为了方便远程调试，也可以先创建 <code class="docutils literal notranslate"><span class="pre">DOCKER_HOST</span></code> 环境变量（这种方式在 <code class="docutils literal notranslate"><span class="pre">sudo</span></code> 方式执行docker不生效）:</p>
<div class="highlight-default notranslate"><div class="highlight"><pre><span></span><span class="n">export</span> <span class="n">DOCKER_HOST</span><span class="o">=</span><span class="n">tcp</span><span class="p">:</span><span class="o">//&lt;</span><span class="n">your</span> <span class="n">host</span><span class="s1">&#39;s ip&gt;:2375</span>
<span class="n">docker</span> <span class="o">&lt;</span><span class="n">subcommand</span><span class="o">&gt;</span>
</pre></div>
</div>
<div class="admonition warning">
<p class="admonition-title">警告</p>
<p>如果直接使用 <code class="docutils literal notranslate"><span class="pre">0.0.0.0</span></code> 作为绑定docker daemon的地址会存在安全隐患，所以这种远程访问配置仅适合在公司局域网内部使用。并且最好是有专用的私有管控网络接口，然后指定docker daemon只在指定的网络接口上打开TCP端口服务，这样可以提高安全性。</p>
</div>
</section>
</section>


            <div class="clearer"></div>
          </div>
      </div>
      <div class="clearer"></div>
    </div>
  </body>
</html>