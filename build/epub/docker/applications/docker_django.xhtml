<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" /><meta name="generator" content="Docutils 0.17.1: http://docutils.sourceforge.net/" />

    <title>Docker环境运行Django</title>
    <link rel="stylesheet" href="../../_static/pygments.css" type="text/css" />
    <link rel="stylesheet" href="../../_static/epub.css" type="text/css" />
    <link rel="stylesheet" href="../../_static/theme_overrides.css" type="text/css" /> 
  </head><body>

    <div class="document">
      <div class="documentwrapper">
          <div class="body" role="main">
            
  <section id="dockerdjango">
<span id="docker-django"></span><h1>Docker环境运行Django</h1>
<div class="admonition note">
<p class="admonition-title">注解</p>
<p>和 <a class="reference internal" href="docker_compose_django.xhtml#docker-compose-django"><span class="std std-ref">在Docker环境运行Django</span></a> 不同，本文采用docker构建tini富容器，运行一个完整 nginx + django + mysql 的开发环境。</p>
<p>后续再拆分这个富容器，采用 kubernetes 的pod 来运行这个组合。</p>
<p>DigitalOcean文档 <a class="reference external" href="https://www.digitalocean.com/community/tutorial_series/from-containers-to-kubernetes-with-django">From Containers to Kubernetes with Django</a><span class="link-target"> [https://www.digitalocean.com/community/tutorial_series/from-containers-to-kubernetes-with-django]</span> 系列提供了一个很好的拆分案例。</p>
</div>
<section id="tini">
<h2>Tini</h2>
<p>在这个完整的Django运行环境是基于 <a class="reference internal" href="../init/docker_tini.xhtml#docker-tini"><span class="std std-ref">Docker tini进程管理器</span></a> 来运行的，也就是以 tini 为进程管理器，在Docker容器中启动多个服务：</p>
<ul class="simple">
<li><p>ssh: 提供基础的运维操作</p></li>
<li><p>cron: 提供定时任务执行</p></li>
<li><p>django: 应用运行程序</p></li>
<li><p>nginx: 提供前端web访问，并代理django</p></li>
</ul>
</section>
</section>


            <div class="clearer"></div>
          </div>
      </div>
      <div class="clearer"></div>
    </div>
  </body>
</html>