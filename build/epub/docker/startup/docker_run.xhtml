<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" /><meta name="generator" content="Docutils 0.17.1: http://docutils.sourceforge.net/" />

    <title>在Docker容器中运行命令</title>
    <link rel="stylesheet" href="../../_static/pygments.css" type="text/css" />
    <link rel="stylesheet" href="../../_static/epub.css" type="text/css" />
    <link rel="stylesheet" href="../../_static/theme_overrides.css" type="text/css" /> 
  </head><body>

    <div class="document">
      <div class="documentwrapper">
          <div class="body" role="main">
            
  <section id="docker">
<span id="docker-run"></span><h1>在Docker容器中运行命令</h1>
<p>在 <a class="reference internal" href="install_docker_linux.xhtml#install-docker-linux"><span class="std std-ref">Linux环境安装Docker</span></a> 后，就可以运行Docker客户端连接Docker Daemon来下载镜像和运行命令。</p>
<div class="admonition note">
<p class="admonition-title">注解</p>
<p>Docker是一种全新的运行模式，它并不建议安装运行一个完整的Linux操作系统，而是采用最小化模式，在每个容器中只运行一个目标应用，例如WEB服务器。所有和运行程序无关的程序和库都不会包含，以使得容器精简，缩小容器安全攻击面。</p>
<p>不过，这种全新的运行模式也带来了运维的难点，或者说需要改变运维工具的视角。如果你想深入理解Docker的镜像制作，请参考 <a class="reference internal" href="../moby/index.xhtml#docker-moby"><span class="std std-ref">Docker Moby</span></a> 。</p>
</div>
<p>虽然你也可以使用docker来运行一个完整Linux操作系统，甚至 <a class="reference internal" href="../admin/docker_ssh.xhtml#docker-ssh"><span class="std std-ref">Docker容器中运行ssh服务</span></a> 构建一个传统的Linux服务器，但是，用Docker来快速运行一个应用，才是Docker的精粹。</p>
<section id="hello-world">
<h2>Hello world</h2>
<p>在我们还没有用 <a class="reference internal" href="../moby/index.xhtml#docker-moby"><span class="std std-ref">Docker Moby</span></a> 打造自己的运行应用之前，我们先来使用一个传奇的Linux命令 <code class="docutils literal notranslate"><span class="pre">busybox</span></code> (你甚至可以在 <a class="reference internal" href="../../android/hack/android_busybox.xhtml#android-busybox"><span class="std std-ref">Android系统Busybox</span></a> 体验)，包含了诸多功能的单一命令行工具:</p>
<div class="highlight-default notranslate"><div class="highlight"><pre><span></span><span class="n">docker</span> <span class="n">run</span> <span class="n">busybox</span> <span class="n">echo</span> <span class="s2">&quot;Hello world&quot;</span>
</pre></div>
</div>
<p>第一次运行上述命令，你会看到docker检测到本地没有busybox镜像，从Docker Hub下载最新的busybox，然后运行输出显示 <code class="docutils literal notranslate"><span class="pre">Hello</span> <span class="pre">world</span></code> 。就好像我们本地操作系统执行 <code class="docutils literal notranslate"><span class="pre">echo</span> <span class="pre">&quot;Hello</span> <span class="pre">world&quot;</span></code> 命令一样。</p>
</section>
<section id="dockernode">
<h2>Docker运行node服务器</h2>
<p>现在我们来运行 node.js 的程序，一个简单显示服务器端主机名和访问客户端IP地址的示例 <code class="docutils literal notranslate"><span class="pre">app.js</span></code> 内容如下:</p>
<div class="literal-block-wrapper docutils container" id="id6">
<div class="code-block-caption"><span class="caption-text">docker_run_example/app.js</span></div>
<div class="highlight-JavaScript notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre><span class="normal"> 1</span>
<span class="normal"> 2</span>
<span class="normal"> 3</span>
<span class="normal"> 4</span>
<span class="normal"> 5</span>
<span class="normal"> 6</span>
<span class="normal"> 7</span>
<span class="normal"> 8</span>
<span class="normal"> 9</span>
<span class="normal">10</span>
<span class="normal">11</span>
<span class="normal">12</span>
<span class="normal">13</span></pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="kd">const</span> <span class="nx">http</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;http&#39;</span><span class="p">);</span>
<span class="kd">const</span> <span class="nx">os</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;os&#39;</span><span class="p">);</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;Kubia server starting...&quot;</span><span class="p">);</span>

<span class="kd">var</span> <span class="nx">handler</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">request</span><span class="p">,</span> <span class="nx">response</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;Received request from &quot;</span> <span class="o">+</span> <span class="nx">request</span><span class="p">.</span><span class="nx">connection</span><span class="p">.</span><span class="nx">remoteAddress</span><span class="p">);</span>
    <span class="nx">response</span><span class="p">.</span><span class="nx">writeHead</span><span class="p">(</span><span class="mf">200</span><span class="p">);</span>
    <span class="nx">response</span><span class="p">.</span><span class="nx">end</span><span class="p">(</span><span class="s2">&quot;You&#39;ve hit &quot;</span> <span class="o">+</span> <span class="nx">os</span><span class="p">.</span><span class="nx">hostname</span><span class="p">()</span> <span class="o">+</span> <span class="s2">&quot;\n&quot;</span><span class="p">);</span>
<span class="p">};</span>

<span class="kd">var</span> <span class="nx">www</span> <span class="o">=</span> <span class="nx">http</span><span class="p">.</span><span class="nx">createServer</span><span class="p">(</span><span class="nx">handler</span><span class="p">);</span>
<span class="nx">www</span><span class="p">.</span><span class="nx">listen</span><span class="p">(</span><span class="mf">8080</span><span class="p">);</span>
</pre></div>
</td></tr></table></div>
</div>
<p>然后在目录下再编辑一个 <code class="docutils literal notranslate"><span class="pre">Dockerfile</span></code> :</p>
<div class="literal-block-wrapper docutils container" id="id7">
<div class="code-block-caption"><span class="caption-text">docker_run_example/Dockerfile</span></div>
<div class="highlight-Dockerfile notranslate"><table class="highlighttable"><tr><td class="linenos"><div class="linenodiv"><pre><span class="normal">1</span>
<span class="normal">2</span>
<span class="normal">3</span></pre></div></td><td class="code"><div class="highlight"><pre><span></span><span class="k">FROM</span> <span class="s">node:7</span>
<span class="k">ADD</span> app.js /app.js
<span class="k">ENTRYPOINT</span> <span class="p">[</span><span class="s2">&quot;node&quot;</span><span class="p">,</span> <span class="s2">&quot;app.js&quot;</span><span class="p">]</span>
</pre></div>
</td></tr></table></div>
</div>
<p>上述Dockerfile的 <code class="docutils literal notranslate"><span class="pre">FROM</span></code> 指定了使用 node 镜像的 tag 7 版本，并复制 <code class="docutils literal notranslate"><span class="pre">app.js</span></code> 到镜像的根目录，并在最后 <code class="docutils literal notranslate"><span class="pre">ENTRYPOINT</span></code> 行指定镜像运行时执行的命令。</p>
<ul>
<li><p>执行以下命令构建一个名为 <code class="docutils literal notranslate"><span class="pre">kubia</span></code> 的镜像:</p>
<div class="highlight-default notranslate"><div class="highlight"><pre><span></span><span class="n">docker</span> <span class="n">build</span> <span class="o">-</span><span class="n">t</span> <span class="n">kubia</span> <span class="o">.</span>
</pre></div>
</div>
</li>
</ul>
<p>构建完成后，镜像存储在本地。注意：Dockerfile中每行指令都会构建一个镜像层。镜像构建是把文件上传到Docker Daemon服务器上构建的。所以如果docker client连接的是远程docker daemon，则需要消耗上传网络带宽。Dockerfile是构建镜像的标准方法，因为这种方法是可以重复的，不需要手工在容器内部执行修改命令然后存储生成新镜像。</p>
<ul>
<li><p>执行以下命令运行镜像:</p>
<div class="highlight-default notranslate"><div class="highlight"><pre><span></span><span class="n">docker</span> <span class="n">run</span> <span class="o">--</span><span class="n">name</span> <span class="n">kubia</span><span class="o">-</span><span class="n">container</span> <span class="o">-</span><span class="n">p</span> <span class="mi">8080</span><span class="p">:</span><span class="mi">8080</span> <span class="o">-</span><span class="n">d</span> <span class="n">kubia</span>
</pre></div>
</div>
</li>
</ul>
<p>上述命令 <code class="docutils literal notranslate"><span class="pre">-d</span></code> 参数表示容器和命令行分离( <code class="docutils literal notranslate"><span class="pre">detach</span></code>  )，也就是放到后台运行。端口映射参数是 <code class="docutils literal notranslate"><span class="pre">-p</span> <span class="pre">8080:8080</span></code> ，这样就可以通过 <a class="reference external" href="http://localhost:8080">http://localhost:8080</a> 访问该应用。</p>
<div class="admonition note">
<p class="admonition-title">注解</p>
<p>如果程序无法正常运行，则可以把 <code class="docutils literal notranslate"><span class="pre">-d</span></code> 参数去除，通过直接观察终端输出日志来确定异常原因。</p>
</div>
<p>如果程序正常运行，则 <code class="docutils literal notranslate"><span class="pre">docker</span> <span class="pre">ps</span></code> 可以显示出容器的ID，镜像等信息:</p>
<div class="highlight-default notranslate"><div class="highlight"><pre><span></span><span class="n">CONTAINER</span> <span class="n">ID</span>        <span class="n">IMAGE</span>               <span class="n">COMMAND</span>             <span class="n">CREATED</span>             <span class="n">STATUS</span>              <span class="n">PORTS</span>                    <span class="n">NAMES</span>
<span class="n">e8ad086e80b6</span>        <span class="n">kubia</span>               <span class="s2">&quot;node app.js&quot;</span>       <span class="mi">2</span> <span class="n">minutes</span> <span class="n">ago</span>       <span class="n">Up</span> <span class="mi">1</span> <span class="n">second</span>         <span class="mf">0.0</span><span class="o">.</span><span class="mf">0.0</span><span class="p">:</span><span class="mi">8080</span><span class="o">-&gt;</span><span class="mi">8080</span><span class="o">/</span><span class="n">tcp</span>   <span class="n">kubia</span><span class="o">-</span><span class="n">container</span>
</pre></div>
</div>
<p>更为详细的信息，可以通过 <code class="docutils literal notranslate"><span class="pre">docker</span> <span class="pre">inspect</span> <span class="pre">&lt;CONTAINER</span> <span class="pre">ID&gt;</span></code> 查看。</p>
<p>此外，如果仅仅列出 <code class="docutils literal notranslate"><span class="pre">CONTAINER</span> <span class="pre">ID</span></code> ，则建议使用命令:</p>
<div class="highlight-default notranslate"><div class="highlight"><pre><span></span><span class="n">docker</span> <span class="n">ps</span> <span class="o">-</span><span class="n">qa</span>
</pre></div>
</div>
<p>则仅输出容器ID:</p>
<div class="highlight-default notranslate"><div class="highlight"><pre><span></span><span class="n">e8ad086e80b6</span>
</pre></div>
</div>
<section id="id1">
<h3>容器内部</h3>
<p>基于Node.js的镜像包含了bash shell，所以可以使用以下命令在容器内部运行shell:</p>
<div class="highlight-default notranslate"><div class="highlight"><pre><span></span><span class="n">docker</span> <span class="n">exec</span> <span class="o">-</span><span class="n">it</span> <span class="n">kubia</span><span class="o">-</span><span class="n">container</span> <span class="n">bash</span>
</pre></div>
</div>
<p>参数:</p>
<ul class="simple">
<li><p><code class="docutils literal notranslate"><span class="pre">-i</span></code> 表示标准输入输出交互</p></li>
<li><p><code class="docutils literal notranslate"><span class="pre">-t</span></code> 表示分配一个伪终端(TTY)</p></li>
</ul>
</section>
<section id="id2">
<h3>停止、删除容器</h3>
<ul>
<li><p>停止容器:</p>
<div class="highlight-default notranslate"><div class="highlight"><pre><span></span><span class="n">docker</span> <span class="n">stop</span> <span class="n">kubia</span><span class="o">-</span><span class="n">container</span>
</pre></div>
</div>
</li>
<li><p>删除容器:</p>
<div class="highlight-default notranslate"><div class="highlight"><pre><span></span><span class="n">docker</span> <span class="n">rm</span> <span class="n">kubia</span><span class="o">-</span><span class="n">container</span>
</pre></div>
</div>
</li>
</ul>
<div class="admonition note">
<p class="admonition-title">注解</p>
<p>删除容器所使用的镜像是使用 <code class="docutils literal notranslate"><span class="pre">docker</span> <span class="pre">rmi</span> <span class="pre">&lt;IMAGE</span> <span class="pre">ID&gt;</span></code></p>
</div>
</section>
</section>
<section id="id3">
<h2>向镜像仓库推送镜像</h2>
<p>为了能够在任何主机上使用镜像，需要把镜像推送到镜像仓库。比较简单的方法是使用公开的 <a class="reference external" href="http://hub.docker.com">Docker Hub</a><span class="link-target"> [http://hub.docker.com]</span> 镜像中心，另外一种比较复杂但是适合企业内部使用的方法是部署私有镜像仓库，例如 <a class="reference internal" href="../../kubernetes/deployment/docker_registry.xhtml#docker-registry"><span class="std std-ref">在Kubernetes中部署私有Docker镜像仓库</span></a> 。我建议你先尝试Docker Hub作为学习，后续转为自建镜像仓库进行大规模数据中心部署。</p>
<p>举例，我的Docker Hub注册是 <code class="docutils literal notranslate"><span class="pre">huataihuang</span></code> ，操纵如下</p>
<ul>
<li><p>首先以自己的ID来重命名镜像:</p>
<div class="highlight-default notranslate"><div class="highlight"><pre><span></span><span class="n">docker</span> <span class="n">tag</span> <span class="n">kubia</span> <span class="n">huataihuang</span><span class="o">/</span><span class="n">kubia</span>
</pre></div>
</div>
</li>
</ul>
<p>这里并不是重新命名标签，而是给同一个镜像创建一个而外的标桥，此时使用 <code class="docutils literal notranslate"><span class="pre">docker</span> <span class="pre">images</span></code> 检查可以看到如下2个镜像标签:</p>
<div class="highlight-default notranslate"><div class="highlight"><pre><span></span><span class="n">REPOSITORY</span>               <span class="n">TAG</span>                 <span class="n">IMAGE</span> <span class="n">ID</span>            <span class="n">CREATED</span>             <span class="n">SIZE</span>
<span class="n">huataihuang</span><span class="o">/</span><span class="n">kubia</span>        <span class="n">latest</span>              <span class="n">faddfa7a8919</span>        <span class="mi">2</span> <span class="n">hours</span> <span class="n">ago</span>         <span class="mi">660</span><span class="n">MB</span>
<span class="n">kubia</span>                    <span class="n">latest</span>              <span class="n">faddfa7a8919</span>        <span class="mi">2</span> <span class="n">hours</span> <span class="n">ago</span>         <span class="mi">660</span><span class="n">MB</span>
</pre></div>
</div>
<ul>
<li><p>登陆Docker Hub:</p>
<div class="highlight-default notranslate"><div class="highlight"><pre><span></span><span class="n">docker</span> <span class="n">login</span>
</pre></div>
</div>
</li>
<li><p>向Docker Hub推送镜像:</p>
<div class="highlight-default notranslate"><div class="highlight"><pre><span></span><span class="n">docker</span> <span class="n">push</span> <span class="n">huataihuang</span><span class="o">/</span><span class="n">kubia</span>
</pre></div>
</div>
</li>
<li><p>现在，在任何主机上都可以使用如下命令来下载自己的镜像并运行容器:</p>
<div class="highlight-default notranslate"><div class="highlight"><pre><span></span><span class="n">docker</span> <span class="n">run</span> <span class="o">-</span><span class="n">p</span> <span class="mi">8080</span><span class="p">:</span><span class="mi">8080</span> <span class="o">-</span><span class="n">d</span> <span class="n">huataihuang</span><span class="o">/</span><span class="n">kubia</span>
</pre></div>
</div>
</li>
</ul>
</section>
<section id="id4">
<h2>构建自己的开发环境</h2>
<p>我使用的主要服务器环境是CentOS，如果每次手工去创建一个工作环境是非常麻烦的，比较好的方式是 <a class="reference internal" href="../admin/dockerfile.xhtml#dockerfile"><span class="std std-ref">从Dockerfile构建Docker镜像</span></a>  ，可以快速构建开发环境。</p>
</section>
<section id="id5">
<h2>参考</h2>
<ul class="simple">
<li><p><a class="reference external" href="https://docs.docker.com/engine/reference/commandline/run/">docker docs: docker run</a><span class="link-target"> [https://docs.docker.com/engine/reference/commandline/run/]</span></p></li>
<li><p>「Kubernetes in Action」</p></li>
</ul>
</section>
</section>


            <div class="clearer"></div>
          </div>
      </div>
      <div class="clearer"></div>
    </div>
  </body>
</html>