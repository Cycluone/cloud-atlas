<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" /><meta name="generator" content="Docutils 0.17.1: http://docutils.sourceforge.net/" />

    <title>Docker基本概念</title>
    <link rel="stylesheet" href="../../_static/pygments.css" type="text/css" />
    <link rel="stylesheet" href="../../_static/epub.css" type="text/css" />
    <link rel="stylesheet" href="../../_static/theme_overrides.css" type="text/css" /> 
  </head><body>

    <div class="document">
      <div class="documentwrapper">
          <div class="body" role="main">
            
  <section id="docker">
<span id="docker-concept"></span><h1>Docker基本概念</h1>
<section id="id1">
<h2>镜像、层、容器</h2>
<img alt="../../_images/docker_image_layer_container.png" src="../../_images/docker_image_layer_container.png" style="width: 510.0px; height: 391.0px;" />
<ul class="simple">
<li><p>Docker Image</p></li>
</ul>
<p>Docker镜像是最底层的包含文件系统和元数据的打包文件</p>
<ul class="simple">
<li><p>Docker Layer</p></li>
</ul>
<p>Docker层是在镜像之上，根据不同需求不断叠加的文件修改内容。使用相同的镜像底层和相同的层创建的Docker容器是完全一致的。</p>
<ul class="simple">
<li><p>Docker Container</p></li>
</ul>
<p>Docker容器就是从镜像上运行的实例，相同镜像可以运行多个容器，区别只是容器的名字不同。</p>
<div class="admonition note">
<p class="admonition-title">注解</p>
<p>用操作系统概念做一个对比：你可以将镜像看成存储在磁盘上的应用程序（文件），而容器就是把程序文件加载到内存中运行的进程。</p>
<p>用面向对象编程做一个对比：镜像就相当于类，而容器相当于对象。对象是类的实例化，类似的，容器就是镜像的实例化。可以从单个镜像创建多个容器，每个容器都是彼此隔离的，就好像从类创建的对象也是彼此分离的。无论你如何修改对象，都不会影响到类的定义。</p>
</div>
<img alt="../../_images/docker_image_container.png" src="../../_images/docker_image_container.png" style="width: 546.0px; height: 494.0px;" />
<p>Docker镜像文件实际存储在磁盘中，镜像包含了文件（系统文件）和元数据，是应用程序运行环境。</p>
<div class="admonition note">
<p class="admonition-title">注解</p>
<p>元数据是环境变量、端口映射、卷等信息</p>
</div>
<p>当容器从镜像上运行起来，所修改的文件在容器中采用了 copy-on-write 机制存储，这样就不会影响到基础的镜像。容器是从镜像创建的，继承了镜像的文件系统，并使用元数据来决定启动配置。</p>
<section id="containerd-runc">
<h3>containerd / runc</h3>
<div class="admonition note">
<p class="admonition-title">注解</p>
<p>参考 <a class="reference external" href="https://stackoverflow.com/questions/41645665/how-containerd-compares-to-runc">How containerd compares to runC</a><span class="link-target"> [https://stackoverflow.com/questions/41645665/how-containerd-compares-to-runc]</span></p>
</div>
<p>在使用docker时候，会发现系统中有 <code class="docutils literal notranslate"><span class="pre">containerd</span></code> 也有 <code class="docutils literal notranslate"><span class="pre">runc</span></code> 进程，有必要梳理一下概念。</p>
<ul class="simple">
<li><p><a class="reference internal" href="../moby/containerd/index.xhtml#containerd"><span class="std std-ref">Containerd</span></a> 是一个用于管理完整容器生命周期的容器运行服务，包括镜像传输和存储，以及容器运行，容器监督和容器网络都是由 <code class="docutils literal notranslate"><span class="pre">contained</span></code> 负责</p></li>
<li><p><code class="docutils literal notranslate"><span class="pre">container-shim</span></code> 负责处理headless 容器（没有显示输出的容器），即负责容器的初始化。这也表示，一旦 <code class="docutils literal notranslate"><span class="pre">runc</span></code> 初始化了容器， <code class="docutils literal notranslate"><span class="pre">container-shim</span></code> 就会退出处理容器，即这是一个中间状态。</p></li>
<li><p><a class="reference internal" href="../moby/runc/index.xhtml#runc"><span class="std std-ref">runc</span></a> 是一个轻量级统一运行时容器，遵守了OCI标准。 <code class="docutils literal notranslate"><span class="pre">runc</span></code> 是 <code class="docutils literal notranslate"><span class="pre">containerd</span></code> 使用的，用于启动并运行符合OCI标准的容器。这个进程也通常被 <code class="docutils literal notranslate"><span class="pre">libcontainer</span></code> 重新包装。</p></li>
<li><p><a class="reference external" href="http://www.grpc.io/">gRPC</a><span class="link-target"> [http://www.grpc.io/]</span> 用于在docker-engine之间通讯。</p></li>
<li><p><a class="reference external" href="https://www.opencontainers.org/">OCI</a><span class="link-target"> [https://www.opencontainers.org/]</span> 维护OCI的运行时和镜像标准。当前的docker版本支持OCI镜像和运行时标准。</p></li>
</ul>
<img alt="../../_images/docker_containerd_runc.png" src="../../_images/docker_containerd_runc.png" />
</section>
<section id="id2">
<h3>Docker容器内服务</h3>
<ul class="simple">
<li><p><a class="reference internal" href="../init/index.xhtml#docker-init"><span class="std std-ref">Docker init进程管理器</span></a></p></li>
</ul>
</section>
</section>
</section>


            <div class="clearer"></div>
          </div>
      </div>
      <div class="clearer"></div>
    </div>
  </body>
</html>