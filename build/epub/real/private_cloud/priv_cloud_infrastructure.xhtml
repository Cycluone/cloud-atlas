<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" /><meta name="generator" content="Docutils 0.17.1: http://docutils.sourceforge.net/" />

    <title>私有云架构</title>
    <link rel="stylesheet" href="../../_static/pygments.css" type="text/css" />
    <link rel="stylesheet" href="../../_static/epub.css" type="text/css" />
    <link rel="stylesheet" href="../../_static/theme_overrides.css" type="text/css" /> 
  </head><body>

    <div class="document">
      <div class="documentwrapper">
          <div class="body" role="main">
            
  <section id="priv-cloud-infrastructure">
<span id="id1"></span><h1>私有云架构</h1>
<section id="kubernetes">
<h2>Kubernetes私有云</h2>
<div class="admonition note">
<p class="admonition-title">注解</p>
<p>kubernetes私有云选型的思考请参考 <a class="reference internal" href="priv_k8s_docker.xhtml#priv-k8s-docker"><span class="std std-ref">私有云Kubernetes和docker环境</span></a></p>
</div>
<p>从集群稳定性和扩展性来说，推荐采用 <a class="reference internal" href="../../kubernetes/deployment/bootstrap_kubernetes/ha_k8s_external.xhtml#ha-k8s-external"><span class="std std-ref">扩展etcd节点高可用集群</span></a> 部署模式：</p>
<ul class="simple">
<li><p>kubernetes的管控组件和etcd分别部署在不同服务器，单节点故障影响从1/3降低到1/6</p></li>
<li><p>运维管理简化，拓扑清晰</p></li>
<li><p>etcd和apiserver都是管控平面非常消耗资源的组件，通过分离etcd部署提升了管控平面整体性能</p></li>
</ul>
<p>但是，我的私有云由于资源限制，只有3台物理服务器，所以我采用了一种混合虚拟化和容器的部署架构：</p>
<ul class="simple">
<li><p>管控平面服务器(kubernetes master)运行在KVM虚拟机(每个物理服务器上运行一个虚拟机)</p>
<ul>
<li><p>共计3台KVM虚拟机，对外提供apiserver服务(直接通过 <a class="reference internal" href="../../kvm/libvirt/index.xhtml#libvirt"><span class="std std-ref">Libvirt虚拟机管理器</span></a> 运行KVM虚拟机，简单清晰)</p></li>
<li><p>物理网络连接Kubernetes worker节点，管理运行在物理节点上的worker nodes</p></li>
<li><p>可以节约服务器占用，同时KVM虚拟机可以平滑迁移</p></li>
</ul>
</li>
<li><p>etcd服务器运行在物理主机上</p>
<ul>
<li><p>etcd是整个kubernetes集群的数据存储，不仅需要保障数据安全性，而且要保证读写性能</p></li>
</ul>
</li>
</ul>
<div class="admonition note">
<p class="admonition-title">注解</p>
<p>最初我考虑采用OpenStack来运行Kubernetes管控服务器，但是OpenStack构建和运行复杂，Kubernetes依赖OpenStack则过于沉重，一旦出现OpenStack异常会导致整个Kubernetes不可用。</p>
<p>基础服务部署着重于稳定和简洁，依赖越少越好：并不是所有基础设施都适合云化(OpenStack)或者云原生(Kubernetes)，特别是BootStrap的基础服务，使用物理裸机来运行反而更稳定更不容易出错。</p>
</div>
<ul class="simple">
<li><p>Kubernetes的worker nodes直接部署在3台物理服务器上</p>
<ul>
<li><p>裸物理服务器运行Docker容器，可以充分发挥物理硬件性能</p></li>
<li><p>Ceph (<a class="reference internal" href="../../ceph/index.xhtml#ceph"><span class="std std-ref">Ceph Atlas</span></a>) 直接运行在物理服务器，提供OpenStack对象存储和Kubernetes卷存储，最大化存储性能</p></li>
<li><p>Gluster (<a class="reference internal" href="../../gluster/index.xhtml#gluster"><span class="std std-ref">Gluster Atlas</span></a>)直接运行在物理服务器，提供oVirt(<a class="reference internal" href="../../ovirt/index.xhtml#ovirt"><span class="std std-ref">oVirt Atlas</span></a>)的虚拟化存储以及虚拟机和Kubernetes的NFS文件存储、数据归档</p></li>
<li><p>网络直通，最大化网络性能</p></li>
</ul>
</li>
</ul>
<div class="admonition note">
<p class="admonition-title">注解</p>
<p>整个似有网络仅使用 <code class="docutils literal notranslate"><span class="pre">3台物理服务器</span></code> 。如果你缺少服务器资源，也可以采用KVM虚拟机来实践部署，即采用完全的OpenStack集群(单机或多机都可以)，在OpenStack之上运行Kubernetes。</p>
</div>
</section>
<section id="openstack">
<h2>OpenStack私有云</h2>
<p>OpenStack和Kubernetes共同部署在3台物理服务器上，底层的基础服务是共享的：</p>
<ul class="simple">
<li><p><a class="reference internal" href="../../kubernetes/administer/etcd/index.xhtml#etcd"><span class="std std-ref">Kubernetes Etcd管理</span></a></p></li>
<li><p><a class="reference internal" href="../../mysql/vitess/index.xhtml#vitess"><span class="std std-ref">Vitess MySQL数据库集群</span></a></p></li>
<li><p><a class="reference internal" href="../../big_data/message_queue/rabbitmq/index.xhtml#rabbitmq"><span class="std std-ref">RabbitMQ消息队列系统</span></a></p></li>
<li><p><a class="reference internal" href="../../big_data/message_queue/kafka/index.xhtml#kafka"><span class="std std-ref">Kafka消息队列系统</span></a></p></li>
<li><p><a class="reference internal" href="../../ceph/index.xhtml#ceph"><span class="std std-ref">Ceph Atlas</span></a></p></li>
<li><p><a class="reference internal" href="../../gluster/index.xhtml#gluster"><span class="std std-ref">Gluster Atlas</span></a></p></li>
</ul>
</section>
<section id="id2">
<h2>私有云拓扑架构图</h2>
<div class="admonition note">
<p class="admonition-title">注解</p>
<p>我采用这种混合OpenStack和Kubernetes的架构主要是为了充分发挥硬件性能同时节约物理服务器资源。如果是在面向公共用户的共有云环境，会采用OpenStack嵌套Kubernetes的架构：</p>
<ul class="simple">
<li><p>通过OpenStack KVM虚拟化提供的强隔离，避免租户之间的影响和安全隐患</p></li>
<li><p>通过Kubernetes提供给用户轻量级和灵活的应用部署能力</p></li>
<li><p>缺点是虚拟化对资源的消耗较大，浪费了一部分物理服务器计算资源</p></li>
<li><p>优点是获得了高安全性，并且具备了虚拟化热迁移的高可用能力</p></li>
</ul>
</div>
</section>
</section>


            <div class="clearer"></div>
          </div>
      </div>
      <div class="clearer"></div>
    </div>
  </body>
</html>