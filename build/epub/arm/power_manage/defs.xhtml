<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" /><meta name="generator" content="Docutils 0.17.1: http://docutils.sourceforge.net/" />

    <title>ARM cpufreq(DVFS)</title>
    <link rel="stylesheet" href="../../_static/pygments.css" type="text/css" />
    <link rel="stylesheet" href="../../_static/epub.css" type="text/css" />
    <link rel="stylesheet" href="../../_static/theme_overrides.css" type="text/css" /> 
  </head><body>

    <div class="document">
      <div class="documentwrapper">
          <div class="body" role="main">
            
  <section id="arm-cpufreq-dvfs">
<span id="defs"></span><h1>ARM cpufreq(DVFS)</h1>
<section id="dvfs">
<h2>DVFS简介</h2>
<p>在ARM系统中cpufreq子系统允许动态调节电压和CPU频率(dynamic voltage and frequency scaling, DVFS)，可以影响CPU性能以及电能消耗以适应当前工作负载。</p>
<section id="cpu">
<h3>检查CPU系统</h3>
<p>通过 <code class="docutils literal notranslate"><span class="pre">/proc/cpuinfo</span></code> 可以查看CPU信息，例如 <a class="reference internal" href="../raspberry_pi/startup/pi_4.xhtml#pi-4"><span class="std std-ref">树莓派Raspberry Pi 4</span></a> 上执行 <code class="docutils literal notranslate"><span class="pre">cat</span> <span class="pre">/proc/cpuinfo</span></code> 可以看到如下输出:</p>
<div class="highlight-default notranslate"><div class="highlight"><pre><span></span><span class="n">processor</span><span class="p">:</span> <span class="mi">0</span>
<span class="n">BogoMIPS</span><span class="p">:</span> <span class="mf">108.00</span>
<span class="n">Features</span><span class="p">:</span> <span class="n">fp</span> <span class="n">asimd</span> <span class="n">evtstrm</span> <span class="n">crc32</span> <span class="n">cpuid</span>
<span class="n">CPU</span> <span class="n">implementer</span><span class="p">:</span> <span class="mh">0x41</span>
<span class="n">CPU</span> <span class="n">architecture</span><span class="p">:</span> <span class="mi">8</span>
<span class="n">CPU</span> <span class="n">variant</span><span class="p">:</span> <span class="mh">0x0</span>
<span class="n">CPU</span> <span class="n">part</span><span class="p">:</span> <span class="mh">0xd08</span>
<span class="n">CPU</span> <span class="n">revision</span><span class="p">:</span> <span class="mi">3</span>

<span class="n">processor</span><span class="p">:</span> <span class="mi">1</span>
<span class="o">...</span>
<span class="n">processor</span><span class="p">:</span> <span class="mi">2</span>
<span class="o">...</span>
<span class="n">processor</span><span class="p">:</span> <span class="mi">3</span>
<span class="o">...</span>

<span class="n">Hardware</span><span class="p">:</span> <span class="n">BCM2835</span>
<span class="n">Revision</span><span class="p">:</span> <span class="n">b03112</span>
<span class="n">Serial</span><span class="p">:</span> <span class="mi">100000003</span><span class="n">b6824d7</span>
<span class="n">Model</span><span class="p">:</span> <span class="n">Raspberry</span> <span class="n">Pi</span> <span class="mi">4</span> <span class="n">Model</span> <span class="n">B</span> <span class="n">Rev</span> <span class="mf">1.2</span>
</pre></div>
</div>
<p>这里 <code class="docutils literal notranslate"><span class="pre">processors</span></code> 后面的数字表示当前内核的CPU编号，例如  <code class="docutils literal notranslate"><span class="pre">processor:</span> <span class="pre">1</span></code> 对应的 <code class="docutils literal notranslate"><span class="pre">/sys/</span></code> 目录下处理器 <code class="docutils literal notranslate"><span class="pre">/sys/devices/system/cpu/cpu1</span></code></p>
<p><code class="docutils literal notranslate"><span class="pre">CPU</span> <span class="pre">part</span></code> 是从 <code class="docutils literal notranslate"><span class="pre">MIDR_EL1</span></code> 系统寄存器中读取的CPU主型号，需要查询处理器的技术参考手册来找到对应的部件号，例如:</p>
<ul class="simple">
<li><p><code class="docutils literal notranslate"><span class="pre">0xd03</span></code> 表示 <code class="docutils literal notranslate"><span class="pre">Cortex-A53</span></code></p></li>
<li><p><code class="docutils literal notranslate"><span class="pre">0xd07</span></code> 表示 <code class="docutils literal notranslate"><span class="pre">Cortex-A57</span></code> - <a class="reference internal" href="../../machine_learning/jetson/index.xhtml#jetson"><span class="std std-ref">NVIDIA Jetson</span></a> 使用的CPU</p></li>
<li><p><code class="docutils literal notranslate"><span class="pre">0xd08</span></code> 表示 <code class="docutils literal notranslate"><span class="pre">Cortex-A72</span></code> - <a class="reference internal" href="../raspberry_pi/startup/pi_4.xhtml#pi-4"><span class="std std-ref">树莓派Raspberry Pi 4</span></a> 使用的CPU</p></li>
</ul>
<div class="admonition note">
<p class="admonition-title">注解</p>
<p>在Android手机上执行 <code class="docutils literal notranslate"><span class="pre">cat</span> <span class="pre">/proc/cpuinfo</span></code> 通常会看到多核心采用了不同的处理器架构，也就是常说的大小核。</p>
</div>
<ul>
<li><p>对于 <a class="reference internal" href="../../machine_learning/jetson/jetson_nano.xhtml#jetson-nano"><span class="std std-ref">Jetson Nano开发套件概览</span></a> 处理器:</p>
<div class="highlight-default notranslate"><div class="highlight"><pre><span></span><span class="n">processor</span><span class="p">:</span> <span class="mi">0</span>
<span class="n">model</span> <span class="n">name</span><span class="p">:</span> <span class="n">ARMv8</span> <span class="n">Processor</span> <span class="n">rev</span> <span class="mi">1</span> <span class="p">(</span><span class="n">v8l</span><span class="p">)</span>
<span class="n">BogoMIPS</span><span class="p">:</span> <span class="mf">38.4</span>           <span class="mi">0</span>
<span class="n">Features</span><span class="p">:</span> <span class="n">fp</span> <span class="n">asimd</span> <span class="n">evtstrm</span> <span class="n">aes</span> <span class="n">pmull</span> <span class="n">sha1</span> <span class="n">sha2</span> <span class="n">crc32</span>
<span class="n">CPU</span> <span class="n">implementer</span>      <span class="p">:</span> <span class="mh">0x41</span>
<span class="n">CPU</span> <span class="n">architecture</span><span class="p">:</span> <span class="mi">8</span>
<span class="n">CPU</span> <span class="n">variant</span><span class="p">:</span> <span class="mh">0x1</span>
<span class="n">CPU</span> <span class="n">part</span><span class="p">:</span> <span class="mh">0xd07</span>
<span class="n">CPU</span> <span class="n">revi</span>     <span class="n">sion</span><span class="p">:</span> <span class="mi">1</span>
</pre></div>
</div>
</li>
</ul>
</section>
</section>
<section id="pinning-cpu">
<h2>将进程绑定(pinning)到CPU</h2>
<p>在Linux中，每个进程的亲和性(affinity)描述了进程在SMP系统中将运行在哪个CPU上，默认是所有CPU，但是我们可以通过 <code class="docutils literal notranslate"><span class="pre">taskset</span></code> 命令来修改亲和性。</p>
<ul>
<li><p>以下案例将 <code class="docutils literal notranslate"><span class="pre">ls</span> <span class="pre">/lib</span></code> 只运行在CPU 5上(Contex_A53_4):</p>
<div class="highlight-default notranslate"><div class="highlight"><pre><span></span><span class="n">taskset</span> <span class="o">-</span><span class="n">c</span> <span class="mi">5</span> <span class="n">ls</span> <span class="o">/</span><span class="n">lib</span>
</pre></div>
</div>
</li>
<li><p>以下案例则只在CPU 1和2上运行(两个Cortex-A57核心):</p>
<div class="highlight-default notranslate"><div class="highlight"><pre><span></span><span class="n">taskset</span> <span class="o">-</span><span class="n">c</span> <span class="mi">1</span><span class="p">,</span><span class="mi">2</span> <span class="n">grep</span> <span class="o">-</span><span class="n">i</span> <span class="n">joe</span> <span class="n">users</span><span class="o">.</span><span class="n">txt</span>
</pre></div>
</div>
</li>
<li><p>以下案例在所有CPU(0-5)上运行命令:</p>
<div class="highlight-default notranslate"><div class="highlight"><pre><span></span><span class="n">taskset</span> <span class="o">-</span><span class="n">c</span> <span class="mi">0</span><span class="o">-</span><span class="mi">5</span> <span class="n">ping</span> <span class="mf">192.0</span><span class="o">.</span><span class="mf">0.1</span>
</pre></div>
</div>
</li>
</ul>
</section>
<section id="id1">
<h2>动态电压和频率调整</h2>
<p>动态电压和频率调整(Dynamic Voltage and Frequency Scaling, DVFS)技术可以运行时调整CPU的时钟频率，通过降低时钟频率可以使得处理idle并且降低电能消耗和热量产生。</p>
<ul>
<li><p>查看当前CPU 3的时钟频率:</p>
<div class="highlight-default notranslate"><div class="highlight"><pre><span></span><span class="n">cat</span> <span class="o">/</span><span class="n">sys</span><span class="o">/</span><span class="n">devices</span><span class="o">/</span><span class="n">system</span><span class="o">/</span><span class="n">cpu</span><span class="o">/</span><span class="n">cpu3</span><span class="o">/</span><span class="n">cpufreq</span><span class="o">/</span><span class="n">scaling_cur_freq</span>
</pre></div>
</div>
</li>
</ul>
<p>例如 <a class="reference internal" href="../raspberry_pi/startup/pi_4.xhtml#pi-4"><span class="std std-ref">树莓派Raspberry Pi 4</span></a> 显示600MHz的低压节电频率:</p>
<div class="highlight-default notranslate"><div class="highlight"><pre><span></span><span class="mi">600000</span>
</pre></div>
</div>
<ul>
<li><p>可以检查CPU支持的可用频率:</p>
<div class="highlight-default notranslate"><div class="highlight"><pre><span></span><span class="n">cat</span> <span class="o">/</span><span class="n">sys</span><span class="o">/</span><span class="n">devices</span><span class="o">/</span><span class="n">system</span><span class="o">/</span><span class="n">cpu</span><span class="o">/</span><span class="n">cpu3</span><span class="o">/</span><span class="n">cpufreq</span><span class="o">/</span><span class="n">scaling_available_frequencies</span>
</pre></div>
</div>
</li>
</ul>
<p>例如 <a class="reference internal" href="../raspberry_pi/startup/pi_4.xhtml#pi-4"><span class="std std-ref">树莓派Raspberry Pi 4</span></a> 显示出有4档处理器频率:</p>
<div class="highlight-default notranslate"><div class="highlight"><pre><span></span><span class="mi">600000</span> <span class="mi">750000</span> <span class="mi">1000000</span> <span class="mi">1500000</span>
</pre></div>
</div>
<ul>
<li><p>手动调整CPU 3的频率:</p>
<div class="highlight-default notranslate"><div class="highlight"><pre><span></span><span class="n">echo</span> <span class="mi">1000000</span> <span class="o">&gt;</span> <span class="o">/</span><span class="n">sys</span><span class="o">/</span><span class="n">devices</span><span class="o">/</span><span class="n">system</span><span class="o">/</span><span class="n">cpu</span><span class="o">/</span><span class="n">cpu3</span><span class="o">/</span><span class="n">cpufreq</span><span class="o">/</span><span class="n">scaling_setspeed</span>
</pre></div>
</div>
</li>
</ul>
<p>这里遇到报错:</p>
<div class="highlight-default notranslate"><div class="highlight"><pre><span></span><span class="o">-</span><span class="n">bash</span><span class="p">:</span> <span class="n">echo</span><span class="p">:</span> <span class="n">write</span> <span class="n">error</span><span class="p">:</span> <span class="n">Invalid</span> <span class="n">argument</span>
</pre></div>
</div>
<p>这个报错参考 <a class="reference external" href="https://unix.stackexchange.com/questions/434735/sys-devices-system-cpu-cpu0-cpufreq-scaling-setspeed-invalid-argument">/sys/devices/system/cpu/cpu0/cpufreq/scaling_setspeed: Invalid argument</a><span class="link-target"> [https://unix.stackexchange.com/questions/434735/sys-devices-system-cpu-cpu0-cpufreq-scaling-setspeed-invalid-argument]</span> 的解释:</p>
<p><code class="docutils literal notranslate"><span class="pre">sysfs</span></code> 和 <code class="docutils literal notranslate"><span class="pre">procfs</span></code> 是内核的接口，通过读写这些分拣来和内核中驱动交互。通常出现 <code class="docutils literal notranslate"><span class="pre">permission</span> <span class="pre">denied</span></code> 则是文件系统权限不足，但是这里的返回是 <code class="docutils literal notranslate"><span class="pre">invalid</span> <span class="pre">argument</span></code> 表明是驱动返回这个错误，很可能是写入数据是驱动不支持的数值范围。</p>
<p>经过测试，我发现树莓派 Raspberry Pi 4不是所有CPU核心都支持 <code class="docutils literal notranslate"><span class="pre">echo</span></code> 某个CPU频率到 <code class="docutils literal notranslate"><span class="pre">scaling_setspeed</span></code> ，对于 <code class="docutils literal notranslate"><span class="pre">CPU0</span></code> 和 <code class="docutils literal notranslate"><span class="pre">CPU1</span></code> 是支持该指令参数，但是 <code class="docutils literal notranslate"><span class="pre">CPU2</span></code> 和 <code class="docutils literal notranslate"><span class="pre">CPU3</span></code> 则不支持。但是，我测试下来即使 <code class="docutils literal notranslate"><span class="pre">echo</span></code> 指定CPU频率值，例如 <code class="docutils literal notranslate"><span class="pre">echo</span> <span class="pre">1000000</span> <span class="pre">/sys/devices/system/cpu/cpu1/cpufreq/scaling_setspeed</span></code> ，但是读取 <code class="docutils literal notranslate"><span class="pre">cat</span> <span class="pre">/sys/devices/system/cpu/cpu0/cpufreq/scaling_cur_freq</span></code> 值依然不是设定值。</p>
</section>
<section id="scaling-governor">
<h2>Scaling governor(主频调节)</h2>
<p>内核动态调节主频的规则是通过 cpufreq scaling governor 定义的。</p>
<p>cpu频率调节策略定义了系统CPU的电源管理特性，会直接影响到CPU性能。每个调节策略有自己独特的特性和用途，适合不同的应用环境。</p>
<p>处理器支持的cpu频率调节策略可以通过以下命令检查:</p>
<div class="highlight-default notranslate"><div class="highlight"><pre><span></span><span class="n">cat</span> <span class="o">/</span><span class="n">sys</span><span class="o">/</span><span class="n">devices</span><span class="o">/</span><span class="n">system</span><span class="o">/</span><span class="n">cpu</span><span class="o">/</span><span class="n">cpu0</span><span class="o">/</span><span class="n">cpufreq</span><span class="o">/</span><span class="n">scaling_available_governors</span>
</pre></div>
</div>
<p>对于 <a class="reference internal" href="../raspberry_pi/startup/pi_4.xhtml#pi-4"><span class="std std-ref">树莓派Raspberry Pi 4</span></a> 有以下cpu频率调节策略:</p>
<div class="highlight-default notranslate"><div class="highlight"><pre><span></span><span class="n">conservative</span> <span class="n">ondemand</span> <span class="n">userspace</span> <span class="n">powersave</span> <span class="n">performance</span> <span class="n">schedutil</span>
</pre></div>
</div>
<ul>
<li><p>检查当前cpu频率调节策略:</p>
<div class="highlight-default notranslate"><div class="highlight"><pre><span></span><span class="n">cat</span> <span class="o">/</span><span class="n">sys</span><span class="o">/</span><span class="n">devices</span><span class="o">/</span><span class="n">system</span><span class="o">/</span><span class="n">cpu</span><span class="o">/</span><span class="n">cpu0</span><span class="o">/</span><span class="n">cpufreq</span><span class="o">/</span><span class="n">scaling_governor</span>
</pre></div>
</div>
</li>
</ul>
<p>可以看到默认是按需:</p>
<div class="highlight-default notranslate"><div class="highlight"><pre><span></span><span class="n">ondemand</span>
</pre></div>
</div>
<p>上述按需cpu频率策略，在idle时候，cpu频率就是最低的600MHz，我们可以通过:</p>
<div class="highlight-default notranslate"><div class="highlight"><pre><span></span><span class="n">cat</span> <span class="o">/</span><span class="n">sys</span><span class="o">/</span><span class="n">devices</span><span class="o">/</span><span class="n">system</span><span class="o">/</span><span class="n">cpu</span><span class="o">/</span><span class="n">cpu0</span><span class="o">/</span><span class="n">cpufreq</span><span class="o">/</span><span class="n">scaling_cur_freq</span>
</pre></div>
</div>
<p>看到输出是:</p>
<div class="highlight-default notranslate"><div class="highlight"><pre><span></span><span class="mi">600000</span>
</pre></div>
</div>
<ul>
<li><p>我们可以调整策略成性能优先:</p>
<div class="highlight-default notranslate"><div class="highlight"><pre><span></span><span class="n">echo</span> <span class="n">performance</span> <span class="o">&gt;</span> <span class="o">/</span><span class="n">sys</span><span class="o">/</span><span class="n">devices</span><span class="o">/</span><span class="n">system</span><span class="o">/</span><span class="n">cpu</span><span class="o">/</span><span class="n">cpu0</span><span class="o">/</span><span class="n">cpufreq</span><span class="o">/</span><span class="n">scaling_governor</span>
</pre></div>
</div>
</li>
</ul>
<p>然后检查策略:</p>
<div class="highlight-default notranslate"><div class="highlight"><pre><span></span><span class="n">cat</span> <span class="o">/</span><span class="n">sys</span><span class="o">/</span><span class="n">devices</span><span class="o">/</span><span class="n">system</span><span class="o">/</span><span class="n">cpu</span><span class="o">/</span><span class="n">cpu0</span><span class="o">/</span><span class="n">cpufreq</span><span class="o">/</span><span class="n">scaling_governor</span>
</pre></div>
</div>
<p>输出确实是性能优先:</p>
<div class="highlight-default notranslate"><div class="highlight"><pre><span></span><span class="n">performance</span>
</pre></div>
</div>
<div class="admonition note">
<p class="admonition-title">注解</p>
<p>在 <a class="reference internal" href="../raspberry_pi/startup/pi_4.xhtml#pi-4"><span class="std std-ref">树莓派Raspberry Pi 4</span></a> 和 <a class="reference internal" href="../../machine_learning/jetson/jetson_nano.xhtml#jetson-nano"><span class="std std-ref">Jetson Nano开发套件概览</span></a> 上4个CPU核心的cpu频率调节策略是完全同步的，也就是修改 cpu0 的调节策略会立即在其他cpu核心同步生效。</p>
</div>
<ul>
<li><p>现在我们检查CPU当前核心频率:</p>
<div class="highlight-default notranslate"><div class="highlight"><pre><span></span><span class="n">cat</span> <span class="o">/</span><span class="n">sys</span><span class="o">/</span><span class="n">devices</span><span class="o">/</span><span class="n">system</span><span class="o">/</span><span class="n">cpu</span><span class="o">/</span><span class="n">cpu0</span><span class="o">/</span><span class="n">cpufreq</span><span class="o">/</span><span class="n">scaling_cur_freq</span>
</pre></div>
</div>
</li>
</ul>
<p>可以看到飙升到最高频率:</p>
<div class="highlight-default notranslate"><div class="highlight"><pre><span></span><span class="mi">1500000</span>
</pre></div>
</div>
<p>我在 <a class="reference internal" href="../../machine_learning/jetson/jetson_nano.xhtml#jetson-nano"><span class="std std-ref">Jetson Nano开发套件概览</span></a> 上调整 <code class="docutils literal notranslate"><span class="pre">scaling_governor</span></code> 设置成 <code class="docutils literal notranslate"><span class="pre">performance</span></code> 之后，频率从原先 <code class="docutils literal notranslate"><span class="pre">518400</span></code> 上升到 <code class="docutils literal notranslate"><span class="pre">1479000</span></code></p>
<p>不过设置cpufreq scaling governor为performance可能会带来CPU温度上升。</p>
<div class="admonition note">
<p class="admonition-title">注解</p>
<p>我在 <a class="reference internal" href="../raspberry_pi/pi_cluster/index.xhtml#pi-cluster"><span class="std std-ref">Raspberry Pi Cluster</span></a> 中组建 <a class="reference internal" href="../../kubernetes/index.xhtml#kubernetes"><span class="std std-ref">Kubernetes Atlas</span></a> 集群，希望能够尽可能压榨出处理器性能，所以我设置 governor 都是 <code class="docutils literal notranslate"><span class="pre">performance</span></code> 。注意，需要配备好散热风扇，并且部署好监控，随时应对处理器国人风险。</p>
</div>
</section>
<section id="governor">
<h2>governor系统配置</h2>
<p>虽然可以通过 <code class="docutils literal notranslate"><span class="pre">rc.local</span></code> 这样的启动脚本来人为设置处理器运行策略，但是最好的方式还是采用系统发行版约定熟成的配置方式。所以，在Ubuntu中，可以采用如下方法:</p>
<div class="highlight-default notranslate"><div class="highlight"><pre><span></span><span class="n">sudo</span> <span class="n">apt</span><span class="o">-</span><span class="n">get</span> <span class="n">install</span> <span class="n">cpufrequtils</span>
<span class="n">echo</span> <span class="s1">&#39;GOVERNOR=&quot;performance&quot;&#39;</span> <span class="o">|</span> <span class="n">sudo</span> <span class="n">tee</span> <span class="o">/</span><span class="n">etc</span><span class="o">/</span><span class="n">default</span><span class="o">/</span><span class="n">cpufrequtils</span>
<span class="n">sudo</span> <span class="n">systemctl</span> <span class="n">disable</span> <span class="n">ondemand</span>
</pre></div>
</div>
<div class="admonition note">
<p class="admonition-title">注解</p>
<p>CPU电源管理对系统性能影响重大，在服务器运维领域，我需要系统学习和整理</p>
</div>
</section>
<section id="id2">
<h2>参考</h2>
<ul class="simple">
<li><p><a class="reference external" href="https://community.arm.com/developer/tools-software/oss-platforms/w/docs/528/cpufreq-dvfs">ARM开发者社区文档:Open source software &gt; Linux/Android &gt; cpufreq(DVFS)</a><span class="link-target"> [https://community.arm.com/developer/tools-software/oss-platforms/w/docs/528/cpufreq-dvfs]</span></p></li>
</ul>
</section>
</section>


            <div class="clearer"></div>
          </div>
      </div>
      <div class="clearer"></div>
    </div>
  </body>
</html>