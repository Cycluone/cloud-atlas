<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" /><meta name="generator" content="Docutils 0.17.1: http://docutils.sourceforge.net/" />

    <title>树莓派4b运行64位Ubuntu</title>
    <link rel="stylesheet" href="../../../_static/pygments.css" type="text/css" />
    <link rel="stylesheet" href="../../../_static/epub.css" type="text/css" />
    <link rel="stylesheet" href="../../../_static/theme_overrides.css" type="text/css" /> 
  </head><body>

    <div class="document">
      <div class="documentwrapper">
          <div class="body" role="main">
            
  <section id="b64ubuntu">
<span id="ubuntu64bit-pi"></span><h1>树莓派4b运行64位Ubuntu</h1>
<p>为了能够充分发挥最新的64位树莓派性能，我采用64位Ubuntu Server进行部署安装，目标是在树莓派上实践64位ARM架构的Linux操作系统，包括但不限于：</p>
<ul class="simple">
<li><p>部署 <a class="reference internal" href="../../../kubernetes/index.xhtml#kubernetes"><span class="std std-ref">Kubernetes Atlas</span></a></p></li>
<li><p>编译和优化64位ARM <a class="reference internal" href="../../../kernel/index.xhtml#kernel"><span class="std std-ref">Kernel Atlas</span></a></p></li>
<li><p>规模化自动部署ARM集群</p></li>
<li><p>探索ARM环境编程</p></li>
</ul>
<section id="id1">
<h2>下载镜像</h2>
<p>从Ubuntu官方下载 <a class="reference external" href="https://ubuntu.com/download/raspberry-pi">Ubuntu 20.04.1 LTS for Raspberry Pi 2,3 or 4</a><span class="link-target"> [https://ubuntu.com/download/raspberry-pi]</span> ，下载的文件是 <cite>.xz</cite> 压缩文件，解压缩以后，通过 <code class="docutils literal notranslate"><span class="pre">dd</span></code> 命令写入到TF卡:</p>
<div class="highlight-default notranslate"><div class="highlight"><pre><span></span><span class="n">dd</span> <span class="k">if</span><span class="o">=</span><span class="n">ubuntu</span><span class="o">-</span><span class="mf">20.04</span><span class="o">.</span><span class="mi">1</span><span class="o">-</span><span class="n">preinstalled</span><span class="o">-</span><span class="n">server</span><span class="o">-</span><span class="n">arm64</span><span class="o">+</span><span class="n">raspi</span><span class="o">.</span><span class="n">img</span> <span class="n">of</span><span class="o">=/</span><span class="n">dev</span><span class="o">/</span><span class="n">rdisk2</span> <span class="n">bs</span><span class="o">=</span><span class="mi">100</span><span class="n">m</span>
</pre></div>
</div>
<div class="admonition note">
<p class="admonition-title">注解</p>
<p>实际上TF卡性能远不如HDD或SSD，所以为了能够充分发挥树莓派性能，建议采用 <a class="reference internal" href="../storage/usb_boot_ubuntu_pi_4.xhtml#usb-boot-ubuntu-pi-4"><span class="std std-ref">树莓派4 USB启动Ubuntu Server 20.04</span></a> ，这样可以充分发挥64位ARM处理器性能。</p>
</div>
</section>
<section id="id2">
<h2>启动</h2>
<p>我选择安装的是Ubuntu Server for Raspberry Pi，这个版本安装没有任何交互，直接启动以后，通过终端使用账号 <code class="docutils literal notranslate"><span class="pre">ubuntu</span></code> 登陆即可使用(密码和账号名相同，首次登陆会强制修改)。</p>
<div class="admonition note">
<p class="admonition-title">注解</p>
<p>Ubuntu镜像刷到TF卡或者USB外接存储磁盘以后，首次启动会把 <code class="docutils literal notranslate"><span class="pre">/dev/sda2</span></code> 挂载的根目录自动扩展到整个磁盘空间。对于我部署 <a class="reference internal" href="../../../ceph/index.xhtml#ceph"><span class="std std-ref">Ceph Atlas</span></a> 和 <a class="reference internal" href="../../../gluster/index.xhtml#gluster"><span class="std std-ref">Gluster Atlas</span></a> 并构建 <a class="reference internal" href="../../../kubernetes/index.xhtml#kubernetes"><span class="std std-ref">Kubernetes Atlas</span></a> 来说，存储分区不合理。所以，我采用 <a class="reference internal" href="../../../linux/storage/filesystem/resize_ext4_rootfs.xhtml#resize-ext4-rootfs"><span class="std std-ref">调整ext4根文件系统大小</span></a> 调整文件系统分区。</p>
</div>
</section>
<section id="id3">
<h2>存储磁盘</h2>
<p>TF卡性能和SSD比较起来性能差很多，所以建议参考 <a class="reference internal" href="../storage/usb_boot_ubuntu_pi_4.xhtml#usb-boot-ubuntu-pi-4"><span class="std std-ref">树莓派4 USB启动Ubuntu Server 20.04</span></a> 将系统迁移到外接SSD移动硬盘运行，这样io性能有数量级提高。</p>
</section>
<section id="id4">
<h2>网络</h2>
<p>在我的 <a class="reference internal" href="../pi_cluster/index.xhtml#pi-cluster"><span class="std std-ref">Raspberry Pi Cluster</span></a> 中，我将有线网络通过千兆桌面交换机连接，构建一个内部高速网络，以便实现分布式环境，部署 <a class="reference internal" href="../../../kubernetes/index.xhtml#kubernetes"><span class="std std-ref">Kubernetes Atlas</span></a> 以及 <a class="reference internal" href="../../../ceph/index.xhtml#ceph"><span class="std std-ref">Ceph Atlas</span></a> / <a class="reference internal" href="../../../gluster/index.xhtml#gluster"><span class="std std-ref">Gluster Atlas</span></a> 。</p>
<div class="admonition note">
<p class="admonition-title">注解</p>
<p>经过对比 <a class="reference internal" href="../../../linux/ubuntu_linux/network/networkmanager.xhtml#networkmanager"><span class="std std-ref">NetworkManager</span></a> 和 <a class="reference internal" href="../../../linux/ubuntu_linux/network/netplan.xhtml#netplan"><span class="std std-ref">netplan网络配置</span></a> 不同的网络配置管理工具，我选择使用netplan来完成配置管理，主要原因是我的主要是作为服务器运行，不需要支持桌面图形管理，可以不必使用功能更为复杂的NetworkManager。</p>
</div>
<section id="ip">
<h3>静态IP地址配置</h3>
<ul>
<li><p>初次启动，如果没有DHCP提供网络IP地址，可以手工设置:</p>
<div class="highlight-default notranslate"><div class="highlight"><pre><span></span><span class="n">ip</span> <span class="n">addr</span> <span class="n">add</span> <span class="mf">192.168</span><span class="o">.</span><span class="mf">6.15</span><span class="o">/</span><span class="mi">25</span> <span class="n">dev</span> <span class="n">eth0</span>
<span class="n">ip</span> <span class="n">route</span> <span class="n">add</span> <span class="n">default</span> <span class="n">via</span> <span class="mf">192.168</span><span class="o">.</span><span class="mf">6.9</span>
</pre></div>
</div>
</li>
<li><p>完成基本的操作系统升级之后，有线网口的静态IP地址采用 <a class="reference internal" href="../../../linux/ubuntu_linux/network/netplan.xhtml#netplan"><span class="std std-ref">netplan网络配置</span></a> 配置，设置方法见 <a class="reference internal" href="../network/pi_ubuntu_network.xhtml#pi-ubuntu-network"><span class="std std-ref">树莓派Ubuntu网络设置</span></a></p></li>
</ul>
</section>
<section id="id5">
<h3>无线网络</h3>
<p><a class="reference external" href="https://ubuntu.com/tutorials/how-to-install-ubuntu-on-your-raspberry-pi#3-wifi-or-ethernet">How to install Ubuntu on your Raspberry Pi - 3. Wi-Fi or Ethernet</a><span class="link-target"> [https://ubuntu.com/tutorials/how-to-install-ubuntu-on-your-raspberry-pi#3-wifi-or-ethernet]</span> 提供了一个在安装过程中设置WiFi的步骤，即编辑SD卡的 <code class="docutils literal notranslate"><span class="pre">system-boot</span></code> 分区中的 <code class="docutils literal notranslate"><span class="pre">network-config</span></code> 文件，去除掉以下段落的注释符号 <code class="docutils literal notranslate"><span class="pre">#</span></code> 类似如下:</p>
<div class="highlight-default notranslate"><div class="highlight"><pre><span></span><span class="n">wifis</span><span class="p">:</span>
  <span class="n">wlan0</span><span class="p">:</span>
  <span class="n">dhcp4</span><span class="p">:</span> <span class="n">true</span>
  <span class="n">optional</span><span class="p">:</span> <span class="n">true</span>
  <span class="n">access</span><span class="o">-</span><span class="n">points</span><span class="p">:</span>
    <span class="o">&lt;</span><span class="n">wifi</span> <span class="n">network</span> <span class="n">name</span><span class="o">&gt;</span><span class="p">:</span>
    <span class="n">password</span><span class="p">:</span> <span class="s2">&quot;&lt;wifi password&gt;&quot;</span>
</pre></div>
</div>
<p>然后保存。然后用这个SD卡首次启动树莓派，就会自动连接WiFi。</p>
<p>Ubuntu for Raspberry Pi默认已经识别了树莓派的无线网卡，之前在 <a class="reference internal" href="../../../linux/ubuntu_linux/ubuntu_on_mbp.xhtml#ubuntu-on-mbp"><span class="std std-ref">MacBook Pro上运行Ubuntu</span></a> 和 <a class="reference internal" href="../../../linux/ubuntu_linux/ubuntu_on_thinkpad_x220.xhtml#ubuntu-on-thinkpad-x220"><span class="std std-ref">ThinkPad X220上运行Ubuntu</span></a> 都使用了NetworkManager <a class="reference internal" href="../../../linux/ubuntu_linux/ubuntu_on_mbp.xhtml#set-ubuntu-wifi"><span class="std std-ref">设置无线网络</span></a> 。但是这种方式实际上多安装了组件，并且和默认netplan使用的 <code class="docutils literal notranslate"><span class="pre">systemd-networkd</span></code> 是完成相同工作，浪费系统内存资源。</p>
<p>所以，建议采用系统已经安装的 <code class="docutils literal notranslate"><span class="pre">netplan</span></code> + <code class="docutils literal notranslate"><span class="pre">networkd</span></code> 后端来完成无线设置。请参考 <a class="reference internal" href="../network/pi_ubuntu_network.xhtml#pi-ubuntu-network"><span class="std std-ref">树莓派Ubuntu网络设置</span></a> 完成设置。</p>
</section>
<section id="id6">
<h3>时区</h3>
<ul>
<li><p>默认是UTC时区，需要修改成本地时区，例如Shanghai:</p>
<div class="highlight-default notranslate"><div class="highlight"><pre><span></span><span class="n">sudo</span> <span class="n">unlink</span> <span class="o">/</span><span class="n">etc</span><span class="o">/</span><span class="n">localtime</span>
<span class="n">sudo</span> <span class="n">ln</span> <span class="o">-</span><span class="n">s</span> <span class="o">/</span><span class="n">usr</span><span class="o">/</span><span class="n">share</span><span class="o">/</span><span class="n">zoneinfo</span><span class="o">/</span><span class="n">Asia</span><span class="o">/</span><span class="n">Shanghai</span> <span class="o">/</span><span class="n">etc</span><span class="o">/</span><span class="n">localtime</span>
</pre></div>
</div>
</li>
</ul>
</section>
<section id="unattended-upgrades">
<h3>停用unattended-upgrades(可选)</h3>
<p>当前为了能够控制升级，特别是 <a class="reference internal" href="../storage/usb_boot_ubuntu_pi_4.xhtml#usb-boot-ubuntu-pi-4"><span class="std std-ref">树莓派4 USB启动Ubuntu Server 20.04</span></a> 需要手工处理内核解压缩，同时为了能够降低系统内存消耗。我关闭了 <a class="reference internal" href="../../../linux/ubuntu_linux/admin/unattended_upgrade.xhtml#unattended-upgrade"><span class="std std-ref">Ubuntu无人值守升级</span></a></p>
<div class="highlight-default notranslate"><div class="highlight"><pre><span></span><span class="n">systemctl</span> <span class="n">disable</span> <span class="n">unattended</span><span class="o">-</span><span class="n">upgrades</span>
<span class="n">systemctl</span> <span class="n">stop</span> <span class="n">unattended</span><span class="o">-</span><span class="n">upgrades</span>
</pre></div>
</div>
</section>
<section id="snapd">
<h3>停用snapd(可选)</h3>
<p>ubuntu默认启用snapd来提供沙箱运行环境，但是我主要使用 <a class="reference internal" href="../../../docker/index.xhtml#docker"><span class="std std-ref">Docker Atlas</span></a> 运行 <a class="reference internal" href="../../../kubernetes/index.xhtml#kubernetes"><span class="std std-ref">Kubernetes Atlas</span></a> ，所以 <a class="reference internal" href="../../../linux/ubuntu_linux/admin/disable_snap.xhtml#disable-snap"><span class="std std-ref">在Ubuntu 20.04中禁用Snaps</span></a></p>
<div class="highlight-default notranslate"><div class="highlight"><pre><span></span><span class="n">snap</span> <span class="nb">list</span>
<span class="n">sudo</span> <span class="n">snap</span> <span class="n">remove</span> <span class="n">lxd</span>
<span class="n">sudo</span> <span class="n">snap</span> <span class="n">remove</span> <span class="n">core18</span>
<span class="n">sudo</span> <span class="n">snap</span> <span class="n">remove</span> <span class="n">snapd</span>
<span class="n">sudo</span> <span class="n">apt</span> <span class="n">purge</span> <span class="n">snapd</span>
<span class="n">sudo</span> <span class="n">apt</span> <span class="n">autoremove</span>
<span class="n">rm</span> <span class="o">-</span><span class="n">rf</span> <span class="o">~/</span><span class="n">snap</span>
<span class="n">sudo</span> <span class="n">rm</span> <span class="o">-</span><span class="n">rf</span> <span class="o">/</span><span class="n">snap</span>
<span class="n">sudo</span> <span class="n">rm</span> <span class="o">-</span><span class="n">rf</span> <span class="o">/</span><span class="n">var</span><span class="o">/</span><span class="n">snap</span>
<span class="n">sudo</span> <span class="n">rm</span> <span class="o">-</span><span class="n">rf</span> <span class="o">/</span><span class="n">var</span><span class="o">/</span><span class="n">lib</span><span class="o">/</span><span class="n">snapd</span>
</pre></div>
</div>
</section>
</section>
<section id="id7">
<h2>桌面系统(不建议)</h2>
<p>默认安装的Ubuntu Server是纯字符界面系统，保持了精简的系统部署，提供了极大的灵活性。所以，如果你需要将服务器版本改造成桌面系统也是可能的(虽然我不建议在服务器上安装桌面软件)。</p>
<ul>
<li><p>首先更新系统软件包:</p>
<div class="highlight-default notranslate"><div class="highlight"><pre><span></span><span class="n">sudo</span> <span class="n">apt</span> <span class="n">update</span>
<span class="n">sudo</span> <span class="n">apt</span> <span class="n">upgrade</span>
</pre></div>
</div>
</li>
<li><p>通过以下 <code class="docutils literal notranslate"><span class="pre">apt</span> <span class="pre">install</span></code> 命令选择一个桌面进行安装:</p>
<div class="highlight-default notranslate"><div class="highlight"><pre><span></span><span class="c1"># 轻量级桌面Xfce4</span>
<span class="n">sudo</span> <span class="n">apt</span> <span class="n">install</span> <span class="n">xubuntu</span><span class="o">-</span><span class="n">desktop</span>
<span class="c1"># 轻量级桌面LXDE</span>
<span class="n">sudo</span> <span class="n">apt</span> <span class="n">install</span> <span class="n">lubuntu</span><span class="o">-</span><span class="n">desktop</span>
<span class="c1"># 全功能桌面Gnome</span>
<span class="n">sudo</span> <span class="n">apt</span> <span class="n">install</span> <span class="n">ubuntu</span><span class="o">-</span><span class="n">desktop</span>
<span class="c1"># 全功能桌面KDE</span>
<span class="n">sudo</span> <span class="n">apt</span><span class="o">-</span><span class="n">get</span> <span class="n">install</span> <span class="n">kubuntu</span><span class="o">-</span><span class="n">desktop</span>
</pre></div>
</div>
</li>
</ul>
<div class="admonition note">
<p class="admonition-title">注解</p>
<p>对于 <a class="reference internal" href="../../../machine_learning/jetson/index.xhtml#jetson"><span class="std std-ref">NVIDIA Jetson</span></a> 或者 <a class="reference internal" href="pi_4.xhtml#pi-4"><span class="std std-ref">树莓派Raspberry Pi 4</span></a> 这样硬件有一定限制的ARM系统，推荐采用轻量级桌面系统，例如 <a class="reference internal" href="../../../linux/desktop/xfce.xhtml#xfce"><span class="std std-ref">Xfce</span></a> 。如果系统默认采用了资源消耗严重的Gnome，例如Jetson Nano默认桌面是Gnome，你也可以将 <a class="reference internal" href="../../../machine_learning/jetson/studio/jetson_xfce4.xhtml#jetson-xfce4"><span class="std std-ref">Jetson运行Xfce4桌面</span></a> 。</p>
</div>
</section>
</section>


            <div class="clearer"></div>
          </div>
      </div>
      <div class="clearer"></div>
    </div>
  </body>
</html>