<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" /><meta name="generator" content="Docutils 0.17.1: http://docutils.sourceforge.net/" />

    <title>perf快速起步</title>
    <link rel="stylesheet" href="../../_static/pygments.css" type="text/css" />
    <link rel="stylesheet" href="../../_static/epub.css" type="text/css" />
    <link rel="stylesheet" href="../../_static/theme_overrides.css" type="text/css" /> 
  </head><body>

    <div class="document">
      <div class="documentwrapper">
          <div class="body" role="main">
            
  <section id="perf">
<span id="perf-startup"></span><h1>perf快速起步</h1>
<div class="admonition note">
<p class="admonition-title">注解</p>
<p>本文仅是一个快速实践记录，我对性能观测理解不深，需要不断学习和实践。会持续改进文档，补充内容。</p>
</div>
<section id="id1">
<h2>perf实现原理</h2>
<p>perf的原理是每隔固定时间，在CPU上(每个cpu核心)产生一个中断，在中断上看当前是哪个pid和哪个函数，然后给对应的pid和函数加上一个统计值。这样我们就能够知道CPU有百分之几的时间在某个pid或者某个寒霜了</p>
<figure class="align-default">
<img alt="../../_images/perf_interupt.png" src="../../_images/perf_interupt.png" style="width: 690.9px; height: 140.0px;" />
</figure>
</section>
<section id="perf-stat">
<h2>perf stat</h2>
<p><code class="docutils literal notranslate"><span class="pre">perf</span> <span class="pre">stat</span></code> 提供了性能统计数据，可以指定进程进行观察:</p>
<div class="highlight-default notranslate"><div class="highlight"><pre><span></span><span class="n">perf</span> <span class="n">stat</span> <span class="o">-</span><span class="n">p</span> <span class="mi">103314</span>
</pre></div>
</div>
<p>过一段时间按下 <code class="docutils literal notranslate"><span class="pre">ctrl-c</span></code> 退出perf，就可以看到统计信息:</p>
<div class="highlight-default notranslate"><div class="highlight"><pre><span></span><span class="n">Performance</span> <span class="n">counter</span> <span class="n">stats</span> <span class="k">for</span> <span class="n">process</span> <span class="nb">id</span> <span class="s1">&#39;103314&#39;</span><span class="p">:</span>

       <span class="mi">856</span><span class="p">,</span><span class="mf">089.63</span> <span class="n">msec</span> <span class="n">task</span><span class="o">-</span><span class="n">clock</span>                <span class="c1">#   10.327 CPUs utilized</span>
        <span class="mi">1</span><span class="p">,</span><span class="mi">121</span><span class="p">,</span><span class="mi">134</span>      <span class="n">context</span><span class="o">-</span><span class="n">switches</span>          <span class="c1"># 1309.600 M/sec</span>
          <span class="mi">171</span><span class="p">,</span><span class="mi">867</span>      <span class="n">cpu</span><span class="o">-</span><span class="n">migrations</span>            <span class="c1">#  200.758 M/sec</span>
          <span class="mi">214</span><span class="p">,</span><span class="mi">445</span>      <span class="n">page</span><span class="o">-</span><span class="n">faults</span>               <span class="c1">#  250.494 M/sec</span>
<span class="mi">1</span><span class="p">,</span><span class="mi">563</span><span class="p">,</span><span class="mi">545</span><span class="p">,</span><span class="mi">050</span><span class="p">,</span><span class="mi">590</span>      <span class="n">cycles</span>                    <span class="c1"># 1826381.428 GHz                   (83.21%)</span>
  <span class="mi">148</span><span class="p">,</span><span class="mi">330</span><span class="p">,</span><span class="mi">561</span><span class="p">,</span><span class="mi">668</span>      <span class="n">stalled</span><span class="o">-</span><span class="n">cycles</span><span class="o">-</span><span class="n">frontend</span>   <span class="c1">#    9.49% frontend cycles idle     (83.37%)</span>
  <span class="mi">196</span><span class="p">,</span><span class="mi">549</span><span class="p">,</span><span class="mi">357</span><span class="p">,</span><span class="mi">979</span>      <span class="n">stalled</span><span class="o">-</span><span class="n">cycles</span><span class="o">-</span><span class="n">backend</span>    <span class="c1">#   12.57% backend cycles idle      (83.39%)</span>
<span class="mi">1</span><span class="p">,</span><span class="mi">595</span><span class="p">,</span><span class="mi">812</span><span class="p">,</span><span class="mi">172</span><span class="p">,</span><span class="mi">679</span>      <span class="n">instructions</span>              <span class="c1">#    1.02  insn per cycle</span>
                                                 <span class="c1">#    0.12  stalled cycles per insn  (83.45%)</span>
  <span class="mi">375</span><span class="p">,</span><span class="mi">183</span><span class="p">,</span><span class="mi">700</span><span class="p">,</span><span class="mi">209</span>      <span class="n">branches</span>                  <span class="c1"># 438253149.157 M/sec               (83.50%)</span>
    <span class="mi">3</span><span class="p">,</span><span class="mi">660</span><span class="p">,</span><span class="mi">917</span><span class="p">,</span><span class="mi">377</span>      <span class="n">branch</span><span class="o">-</span><span class="n">misses</span>             <span class="c1">#    0.98% of all branches          (83.11%)</span>

     <span class="mf">82.895081792</span> <span class="n">seconds</span> <span class="n">time</span> <span class="n">elapsed</span>
</pre></div>
</div>
</section>
<section id="id2">
<h2>perf记录和火焰图</h2>
<ul>
<li><p>对应用进程进行perf记录:</p>
<div class="highlight-default notranslate"><div class="highlight"><pre><span></span><span class="n">sudo</span> <span class="n">perf</span> <span class="n">record</span> <span class="o">-</span><span class="n">F</span> <span class="mi">99</span> <span class="o">-</span><span class="n">p</span> <span class="mi">504843</span> <span class="o">-</span><span class="n">g</span> <span class="o">--</span> <span class="n">sleep</span> <span class="mi">60</span>
</pre></div>
</div>
</li>
</ul>
<p>参数说明:</p>
<blockquote>
<div><p><code class="docutils literal notranslate"><span class="pre">-F</span> <span class="pre">99</span></code> : 每秒采样99次 - 使用99而不是100，是为了防止采样周期与某些系统周期事件重合，影响采样结果
<code class="docutils literal notranslate"><span class="pre">sleep</span> <span class="pre">60</span></code> : 持续采样60秒
<code class="docutils literal notranslate"><span class="pre">-g</span></code> : 记录调用栈
<code class="docutils literal notranslate"><span class="pre">-p</span> <span class="pre">504843</span></code> : 进程号，表示对哪个进程进行分析</p>
</div></blockquote>
<p>CPU核心数量越多，则采样记录的调用栈就越多</p>
<p>上述命令执行结束以后，会在 <code class="docutils literal notranslate"><span class="pre">/tmp</span></code> 目录下生成一个 <code class="docutils literal notranslate"><span class="pre">perf.data</span></code> 文件</p>
<ul>
<li><p>执行分析可以使用 <code class="docutils literal notranslate"><span class="pre">perf</span> <span class="pre">report</span></code> 命令统计:</p>
<div class="highlight-default notranslate"><div class="highlight"><pre><span></span><span class="n">sudo</span> <span class="n">perf</span> <span class="n">report</span> <span class="o">-</span><span class="n">n</span> <span class="o">--</span><span class="n">stdio</span>
</pre></div>
</div>
</li>
</ul>
<p>统计出每个调用栈出现百分比，从高到低排序。不过这个输出不是很容易观察</p>
<section id="id3">
<h3>火焰图</h3>
<ul>
<li><p>dump出perf.data内容:</p>
<div class="highlight-default notranslate"><div class="highlight"><pre><span></span><span class="n">sudo</span> <span class="n">perf</span> <span class="n">script</span> <span class="o">&gt;</span> <span class="n">out</span><span class="o">.</span><span class="n">perf</span>
</pre></div>
</div>
</li>
<li><p>下载火焰图工具:</p>
<div class="highlight-default notranslate"><div class="highlight"><pre><span></span><span class="n">git</span> <span class="n">clone</span> <span class="o">--</span><span class="n">depth</span> <span class="mi">1</span> <span class="n">https</span><span class="p">:</span><span class="o">//</span><span class="n">github</span><span class="o">.</span><span class="n">com</span><span class="o">/</span><span class="n">brendangregg</span><span class="o">/</span><span class="n">FlameGraph</span><span class="o">.</span><span class="n">git</span>
</pre></div>
</div>
</li>
<li><p>折叠调用栈:</p>
<div class="highlight-default notranslate"><div class="highlight"><pre><span></span><span class="n">FlameGraph</span><span class="o">/</span><span class="n">stackcollapse</span><span class="o">-</span><span class="n">perf</span><span class="o">.</span><span class="n">pl</span> <span class="n">out</span><span class="o">.</span><span class="n">perf</span> <span class="o">&gt;</span> <span class="n">out</span><span class="o">.</span><span class="n">folded</span>
</pre></div>
</div>
</li>
<li><p>生成火焰图:</p>
<div class="highlight-default notranslate"><div class="highlight"><pre><span></span><span class="n">FlameGraph</span><span class="o">/</span><span class="n">flamegraph</span><span class="o">.</span><span class="n">pl</span> <span class="n">out</span><span class="o">.</span><span class="n">folded</span> <span class="o">&gt;</span> <span class="n">out</span><span class="o">.</span><span class="n">svg</span>
</pre></div>
</div>
</li>
</ul>
<p>生成火焰图可以指定参数， <code class="docutils literal notranslate"><span class="pre">–width</span></code> 可以指定图片宽度， <code class="docutils literal notranslate"><span class="pre">–height</span></code> 指定每一个调用栈的高度；还可以针对语言设置火焰图颜色，例如 <code class="docutils literal notranslate"><span class="pre">--color=js</span></code> 是针对JavaScript配色svg， <code class="docutils literal notranslate"><span class="pre">--color=java</span></code> 则是针对Java配色svg。</p>
<p>上述两个生成火焰图的命令步骤也可以合并成一个命令:</p>
<div class="highlight-default notranslate"><div class="highlight"><pre><span></span><span class="n">FlameGraph</span><span class="o">/</span><span class="n">stackcollapse</span><span class="o">-</span><span class="n">perf</span><span class="o">.</span><span class="n">pl</span> <span class="o">&lt;</span> <span class="n">out</span><span class="o">.</span><span class="n">perf</span> <span class="o">|</span> <span class="n">FlameGraph</span><span class="o">/</span><span class="n">flamegraph</span><span class="o">.</span><span class="n">pl</span> <span class="n">out</span><span class="o">.</span><span class="n">folded</span> <span class="o">&gt;</span> <span class="n">out</span><span class="o">.</span><span class="n">svg</span>
</pre></div>
</div>
<p>其他的案例命令:</p>
<div class="highlight-default notranslate"><div class="highlight"><pre><span></span><span class="n">FlameGraph</span><span class="o">/</span><span class="n">stackcollapse</span><span class="o">-</span><span class="n">perf</span><span class="o">.</span><span class="n">pl</span> <span class="o">--</span><span class="n">kernel</span> <span class="o">&lt;</span> <span class="n">out</span><span class="o">.</span><span class="n">perf</span> <span class="o">|</span> <span class="n">FlameGraph</span><span class="o">/</span><span class="n">flamegraph</span><span class="o">.</span><span class="n">pl</span> <span class="o">--</span><span class="n">color</span><span class="o">=</span><span class="n">js</span> <span class="o">--</span><span class="nb">hash</span> <span class="o">&gt;</span> <span class="n">out</span><span class="o">.</span><span class="n">svg</span>
</pre></div>
</div>
</section>
<section id="id4">
<h3>综合步骤</h3>
<p>如果对系统进行观察，可以将上述火焰图数据采集和操作步骤合并成以下命令:</p>
<div class="highlight-default notranslate"><div class="highlight"><pre><span></span><span class="n">git</span> <span class="n">clone</span> <span class="n">https</span><span class="p">:</span><span class="o">//</span><span class="n">github</span><span class="o">.</span><span class="n">com</span><span class="o">/</span><span class="n">brendangregg</span><span class="o">/</span><span class="n">FlameGraph</span>
<span class="n">cd</span> <span class="n">FlameGraph</span>
<span class="n">perf</span> <span class="n">record</span> <span class="o">-</span><span class="n">F</span> <span class="mi">99</span> <span class="o">-</span><span class="n">a</span> <span class="o">-</span><span class="n">g</span> <span class="o">--</span> <span class="n">sleep</span> <span class="mi">60</span>
<span class="n">perf</span> <span class="n">script</span> <span class="o">|</span> <span class="o">./</span><span class="n">stackcollapse</span><span class="o">-</span><span class="n">perf</span><span class="o">.</span><span class="n">pl</span> <span class="o">|</span> <span class="o">./</span><span class="n">flamegraph</span><span class="o">.</span><span class="n">pl</span> <span class="o">&gt;</span> <span class="n">out</span><span class="o">.</span><span class="n">svg</span>
</pre></div>
</div>
</section>
</section>
<section id="id5">
<h2>火焰图观察简介</h2>
<p>火焰图的Y轴表示调用栈，每一层都是一个函数。调用栈越深，火焰就越高，顶部就是正在执行的函数，下方就是该函数的父函数。</p>
<p>火焰图的X轴表示抽样数量，如果一个函数在X轴占据的宽度越款，就表示它被抽到的次数越多，即执行的时间越长。</p>
<p><strong>注意：X轴不代表时间，而是所有调用栈合并以后按照字母顺序排列的</strong></p>
<p><strong>火焰图就是看顶层哪个函数占据的宽对最大。只要有 ``平顶`` (plateaus) 就表示该函数存在性能问题。</strong></p>
<p>火焰图的颜色没有特殊含义，只是表示CPU的繁忙程度，一般选择暖色调。</p>
<ul class="simple">
<li><p>鼠标放到一个函数上后, 会展示完整的函数名, 被抽样中的次数, 占总抽样次数的百分比</p></li>
<li><p>点击某个函数后, 该函数会水平放大到占据整个页面, 展示详细信息</p></li>
<li><p>点击左上角 <code class="docutils literal notranslate"><span class="pre">Reset</span> <span class="pre">Zoom</span></code> 恢复缩放</p></li>
<li><p><code class="docutils literal notranslate"><span class="pre">ctrl</span> <span class="pre">+</span> <span class="pre">f</span></code> 可以搜索关键词或正则, 所有符合的函数名会高亮显示</p></li>
</ul>
</section>
<section id="id6">
<h2>火焰图局限性</h2>
<p>有两种情况无法画出火焰图，需要修正系统行为：</p>
<ul class="simple">
<li><p>调用栈不完整： 当调用栈过深时，某些系统只返回前面一部分（例如前10曾）。</p></li>
<li><p>函数名缺失： 有些函数没有名字，编译器只是用内存地址来表示（例如匿名函数）。</p></li>
</ul>
</section>
<section id="id7">
<h2>参考</h2>
<ul class="simple">
<li><p><a class="reference external" href="https://codertang.com/2018/12/17/perf/">使用perf和火焰图分析系统性能</a><span class="link-target"> [https://codertang.com/2018/12/17/perf/]</span></p></li>
<li><p><a class="reference external" href="http://www.ruanyifeng.com/blog/2017/09/flame-graph.html">如何读懂火焰图</a><span class="link-target"> [http://www.ruanyifeng.com/blog/2017/09/flame-graph.html]</span></p></li>
<li><p><a class="reference external" href="https://www.cnblogs.com/arnoldlu/p/6241297.html">系统级性能分析工具perf的介绍与使用</a><span class="link-target"> [https://www.cnblogs.com/arnoldlu/p/6241297.html]</span></p></li>
<li><p><a class="reference external" href="https://zhuanlan.zhihu.com/p/22194920">在Linux下做性能分析3：perf</a><span class="link-target"> [https://zhuanlan.zhihu.com/p/22194920]</span></p></li>
<li><p><a class="reference external" href="https://zhuanlan.zhihu.com/p/73385693">《性能之巅》学习笔记之火焰图 其之一</a><span class="link-target"> [https://zhuanlan.zhihu.com/p/73385693]</span></p></li>
</ul>
</section>
</section>


            <div class="clearer"></div>
          </div>
      </div>
      <div class="clearer"></div>
    </div>
  </body>
</html>