<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" /><meta name="generator" content="Docutils 0.17.1: http://docutils.sourceforge.net/" />

    <title>tethering共享VPN加速</title>
    <link rel="stylesheet" href="../../../_static/pygments.css" type="text/css" />
    <link rel="stylesheet" href="../../../_static/epub.css" type="text/css" />
    <link rel="stylesheet" href="../../../_static/theme_overrides.css" type="text/css" /> 
  </head><body>

    <div class="document">
      <div class="documentwrapper">
          <div class="body" role="main">
            
  <section id="tetheringvpn">
<span id="linux-tether-vpn"></span><h1>tethering共享VPN加速</h1>
<p>在 <a class="reference internal" href="jetson_nano_startup.xhtml#jetson-nano-startup"><span class="std std-ref">Jetson Nano快速起步</span></a> 中，我遇到一个困难：在墙内访问NVIDIA软件仓库几乎是 <a class="reference external" href="https://movie.douban.com/subject/1292484/">Mission: Impossible</a><span class="link-target"> [https://movie.douban.com/subject/1292484/]</span> 。</p>
<p>技术人不能让尿憋死，你说是不是？</p>
<section id="id1">
<h2>专线+多级代理</h2>
<p>为了能够稳定访问NVIDIA的软件仓库，可以使用 <a class="reference internal" href="../../../linux/security/vpn/openconnect_vpn.xhtml#openconnect-vpn"><span class="std std-ref">OpenConnect VPN</span></a> 来突破墙的干扰。</p>
<p>但是，直接访问海外的VPN服务器，SSL加密通讯阻塞非常严重。所以，通常需要借助 <a class="reference internal" href="../../../web/proxy/squid/index.xhtml#squid"><span class="std std-ref">Squid代理服务</span></a> 通过墙内和墙外 <a class="reference internal" href="../../../web/proxy/squid/squid_socks_peer.xhtml#squid-socks-peer"><span class="std std-ref">Squid父级socks代理</span></a> 这样的解决方案：寻找到稳定的专线连接，通过多级代理迂回实现稳定的Internet访问。</p>
</section>
<section id="androidvpn">
<h2>Android共享VPN</h2>
<p>在访问 <a class="reference internal" href="../../../web/proxy/squid/index.xhtml#squid"><span class="std std-ref">Squid代理服务</span></a> ，为了安全，需要构建加密通讯。但是，Linux平台可能没有专用的商业VPN客户端，此时我们需要借用Android手机上常用的商业VPN客户端构建加密通道。</p>
<p><a class="reference internal" href="../../../android/hack/android_usb_tethering.xhtml#android-usb-tethering"><span class="std std-ref">通过USB Tethering方式共享Android的Internet连接</span></a> 同时运行 <a class="reference internal" href="../../../android/hack/vpn_hotspot.xhtml#vpn-hotspot"><span class="std std-ref">VPN Hotspot</span></a> ，可以让 <a class="reference internal" href="../index.xhtml#jetson"><span class="std std-ref">NVIDIA Jetson</span></a> 主机借助Android手机的VPN安全访问 <a class="reference internal" href="../../../web/proxy/squid/index.xhtml#squid"><span class="std std-ref">Squid代理服务</span></a> ，实现稳定的Internet访问。</p>
<p>Jetson nano的Linux系统默认已经能够识别 <a class="reference internal" href="../../../android/hack/android_usb_tethering.xhtml#android-usb-tethering"><span class="std std-ref">通过USB Tethering方式共享Android的Internet连接</span></a> 设备，当Android端启用USB tethering时，系统自动添加网络设备 <code class="docutils literal notranslate"><span class="pre">usb1</span></code> ，此时只需要在该设备上启动 <code class="docutils literal notranslate"><span class="pre">dhclient</span></code> 就可以:</p>
<div class="highlight-default notranslate"><div class="highlight"><pre><span></span><span class="n">dhclient</span> <span class="n">usb1</span>
</pre></div>
</div>
<p>获取到USB tethering分配的IP地址之后，只需要简单关闭无线网络默认路由，就可以用共享VPN方式访问Internet。</p>
<div class="admonition note">
<p class="admonition-title">注解</p>
<p>对于Linux tethering支持，请参考 <a class="reference external" href="https://wiki.archlinux.org/index.php/Android_tethering">arch linux官方文档: Android tethering</a><span class="link-target"> [https://wiki.archlinux.org/index.php/Android_tethering]</span></p>
</div>
</section>
</section>


            <div class="clearer"></div>
          </div>
      </div>
      <div class="clearer"></div>
    </div>
  </body>
</html>