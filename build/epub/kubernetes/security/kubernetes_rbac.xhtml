<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" /><meta name="generator" content="Docutils 0.17.1: http://docutils.sourceforge.net/" />

    <title>Kubernetes RBAC鉴权</title>
    <link rel="stylesheet" href="../../_static/pygments.css" type="text/css" />
    <link rel="stylesheet" href="../../_static/epub.css" type="text/css" />
    <link rel="stylesheet" href="../../_static/theme_overrides.css" type="text/css" /> 
  </head><body>

    <div class="document">
      <div class="documentwrapper">
          <div class="body" role="main">
            
  <section id="kubernetes-rbac">
<span id="id1"></span><h1>Kubernetes RBAC鉴权</h1>
<section id="rbac-role-based-access-control">
<h2>RBAC(Role-based Access control)访问控制模型</h2>
<p>基本的RBAC模型中定义了三个对象和两个关系，三个对象分别是：user，role，resourc。一个用户可以属于多个角色，而一个角色下面也可以有多个用户。同样，角色和权限之间也是这种多对多的关系。</p>
<figure class="align-default">
<img alt="../../_images/rbac_relation.png" src="../../_images/rbac_relation.png" style="width: 307.20000000000005px; height: 212.8px;" />
</figure>
<p>RBAC支持公认的安全原则：</p>
<ul class="simple">
<li><p>最小特权原则</p></li>
<li><p>责任分离原则</p></li>
<li><p>数据抽象原则</p></li>
</ul>
<p>RBAC支持数据抽象的程度与RBAC模型的实现细节有关。</p>
<p>RBAC缺点:</p>
<ul class="simple">
<li><p>RBAC模型没有提供操作顺序控制机制。这一缺陷使得RBAC模型很难应用关于那些要求有严格操作次序的实体系统。</p></li>
</ul>
</section>
<section id="kubernetesrbac">
<h2>Kubernetes和RBAC鉴权</h2>
<p>基于角色（Role）的访问控制（RBAC）是一种基于组织中用户的角色来调节控制对计算机或网络资源的访问的方法。在Kubernetes中，RBAC 鉴权机制使用 <code class="docutils literal notranslate"><span class="pre">rbac.authorization.k8s.io</span></code> API组来驱动鉴权决定，允许通过Kubernetes API 动态配置策略。</p>
<p>要启用RBAC，在启动API服务器时将 <code class="docutils literal notranslate"><span class="pre">--authorization-mode</span></code> 参数设置为一个逗号分隔的列表并确保其中包含 <code class="docutils literal notranslate"><span class="pre">RBAC</span></code></p>
<div class="highlight-default notranslate"><div class="highlight"><pre><span></span><span class="n">kube</span><span class="o">-</span><span class="n">apiserver</span> <span class="o">--</span><span class="n">authorization</span><span class="o">-</span><span class="n">mode</span><span class="o">=</span><span class="n">Example</span><span class="p">,</span><span class="n">RBAC</span> <span class="o">--&lt;</span><span class="n">其他选项</span><span class="o">&gt;</span> <span class="o">--&lt;</span><span class="n">其他选项</span><span class="o">&gt;</span>
</pre></div>
</div>
<div class="admonition note">
<p class="admonition-title">注解</p>
<p>在默认部署的Kubernetes集群，默认启用的认证模式参数是 <code class="docutils literal notranslate"><span class="pre">--authorization-mode=Node,RBAC</span></code></p>
</div>
</section>
<section id="kubernetesapi">
<h2>Kubernetes的API对象</h2>
<p>RBAC API 声明了四种 Kubernetes 对象:</p>
<ul class="simple">
<li><p>Role</p></li>
<li><p>ClusterRole</p></li>
<li><p>RoleBinding</p></li>
<li><p>ClusterRoleBinding</p></li>
</ul>
<section id="role-clusterrole">
<h3>Role 和 ClusterRole</h3>
<p>Role和ClusterRole的区别在于作用域:</p>
<ul class="simple">
<li><p>Role 总是用来在某个名字空间内设置访问权限；在创建 Role 时，必须指定该 Role 所属的名字空间。</p></li>
<li><p>ClusterRole 则是一个集群作用域的资源:</p>
<ul>
<li><p>集群范围资源(例如节点Node)</p></li>
<li><p>非资源端点(例如 <code class="docutils literal notranslate"><span class="pre">/helthz</span></code> )</p></li>
</ul>
</li>
</ul>
<p>注意：Kubernetes对象要么是名字空间作用域，要么是集群作用域，不可两者兼具。</p>
<p>ClusterRole的使用案例:</p>
<ul class="simple">
<li><p>定义对某名字空间域对象的访问权限，并将在各个名字空间内完成授权</p></li>
<li><p>为名字空间作用域的对象设置访问权限，并跨所有名字空间执行授权</p></li>
<li><p>为集群作用域的资源定义访问权限</p></li>
</ul>
<p>如果你希望在名字空间内定义角色，应该使用 Role； 如果你希望定义集群范围的角色，应该使用 ClusterRole。</p>
<div class="admonition note">
<p class="admonition-title">注解</p>
<p>关于Role和ClusterRole，我举个应用例子：</p>
<ul class="simple">
<li><p>如果你的应用要部署在不同集群，我们可以采用每个应用分配一个以应用名字为命名的名字空间，这样只要授权给对应应用的维护人员一个Role，就可以允许用户自己处理所有集群该应用的部署和使用。</p></li>
<li><p>如果你想让用户自己维护集群，并且允许用户维护某个集群的跨名字空间作用域的资源，可以使用ClusterRole来配置，这样按照集群维度授权特别适合运维人员负责独立的集群。</p></li>
<li><p>可以将Role视为横向扩展权限，ClusterRole视为纵向扩展权限</p></li>
</ul>
</div>
</section>
<section id="rolebindingclusterrolebinding">
<h3>RoleBinding和ClusterRoleBinding</h3>
<p>角色绑定(Role Binding)是将角色定义的权限赋予一个或一组用户。它包含若干 <code class="docutils literal notranslate"><span class="pre">主体</span></code> (用户、组或者服务账户)的列表和对这些主体所获得的角色的引用。</p>
<p>RoleBinding在指定的名字空间中执行授权，而ClusterRoleBinding在集群范围内进行授权。</p>
<p>RoleBinding也可以引用ClusterRole，以将对应ClusterRole中定义的访问权限授予 RoleBinding所在名字空间的资源。这种引用使得你可以跨整个集群定义一组通用的角色，之后在多个名字空间中复用。</p>
</section>
</section>
<section id="id2">
<h2>参考</h2>
<ul class="simple">
<li><p><a class="reference external" href="https://kubernetes.io/zh/docs/reference/access-authn-authz/rbac/">Kubernetes 文档/参考/访问 API/使用 RBAC 鉴权</a><span class="link-target"> [https://kubernetes.io/zh/docs/reference/access-authn-authz/rbac/]</span></p></li>
</ul>
</section>
</section>


            <div class="clearer"></div>
          </div>
      </div>
      <div class="clearer"></div>
    </div>
  </body>
</html>