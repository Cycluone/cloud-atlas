<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" /><meta name="generator" content="Docutils 0.17.1: http://docutils.sourceforge.net/" />

    <title>Ingress</title>
    <link rel="stylesheet" href="../../../_static/pygments.css" type="text/css" />
    <link rel="stylesheet" href="../../../_static/epub.css" type="text/css" />
    <link rel="stylesheet" href="../../../_static/theme_overrides.css" type="text/css" /> 
  </head><body>

    <div class="document">
      <div class="documentwrapper">
          <div class="body" role="main">
            
  <section id="ingress">
<span id="id1"></span><h1>Ingress</h1>
<p>Ingress是Kubernetes的API对象，用于管理外部访问集群中的某个服务，通常是HTTP服务。Ingress可以提供负载均衡，SSL卸载以及基于名字解析的虚拟主机。</p>
<p>Ingress将集群内部的 <a class="reference internal" href="kubernetes_services.xhtml#kubernetes-services"><span class="std std-ref">Kubeernetes服务(services)</span></a> 输出到外部的HTTP和HTTPS路由。流量路由是在Ingress资源所定义的规则来控制的。</p>
<p>Ingress可以将给定的服务配置成外部可以访问的URLs，负载均衡流量，卸载SSL/TLS，以及提供基于名字的虚拟主机。而一个 <a class="reference internal" href="ingress_controller.xhtml#ingress-controller"><span class="std std-ref">Ingress控制器(controller)</span></a> 则负责管理Ingress，结合负载均衡，就可以通过Ingress Controller配置边界路由器或者增加前端来帮助处理流量。</p>
<p>Ingress不会输出随机端口或协议。对于需要输出HTTP和HTTPS以外的服务则通常使用 <code class="docutils literal notranslate"><span class="pre">Service.Type=NodePort</span></code> 或者 <code class="docutils literal notranslate"><span class="pre">Service.Type=LoadBalancer</span></code> (参考 <a class="reference internal" href="kubernetes_services.xhtml#kubernetes-services"><span class="std std-ref">Kubeernetes服务(services)</span></a> )。</p>
<div class="admonition note">
<p class="admonition-title">注解</p>
<p>有多种 <a class="reference internal" href="ingress_controller.xhtml#ingress-controller"><span class="std std-ref">Ingress控制器(controller)</span></a> 可以选择，即有多种负载均衡可以作为容器实例运行在边界，例如 NGINX, HAProxy, Istio, Gloo 等等。例如opensource.com上文章 <a class="reference external" href="https://opensource.com/article/20/4/http-kubernetes-skipper">Try this Kubernetes HTTP router and reverse proxy</a><span class="link-target"> [https://opensource.com/article/20/4/http-kubernetes-skipper]</span> 介绍了采用 <a class="reference external" href="https://opensource.zalando.com/skipper/">zalando开发的skipper</a><span class="link-target"> [https://opensource.zalando.com/skipper/]</span> 实现Ingress(我准备后续实践)。</p>
<p>为了有感性认识，请参考 <a class="reference internal" href="../../deployment/docker_registry.xhtml#docker-registry"><span class="std std-ref">在Kubernetes中部署私有Docker镜像仓库</span></a> ，其中采用了 NGINX Ingress 来实现。</p>
</div>
<section id="id2">
<h2>参考</h2>
<ul class="simple">
<li><p><a class="reference external" href="https://kubernetes.io/docs/concepts/services-networking/ingress/">Kubernetes - Concepts: Ingress</a><span class="link-target"> [https://kubernetes.io/docs/concepts/services-networking/ingress/]</span></p></li>
</ul>
</section>
</section>


            <div class="clearer"></div>
          </div>
      </div>
      <div class="clearer"></div>
    </div>
  </body>
</html>